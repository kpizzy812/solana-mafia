#!/bin/bash
# manual-test.sh - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Solana Mafia

set -e

echo "üéÆ SOLANA MAFIA - MANUAL TESTING TOOLKIT"
echo "========================================"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–∑–∞–≥–ª–∞–≤–Ω—ã–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)
PROGRAM_ID="3Ly6bEWRfKyVGwrRN27gHhBogo1K4HbZyk69KHW9AUx7"
GAME_STATE_PDA="AXfj87zMh8zeRaiWwQMH8vjyS5PVcP9Ddm3rTUPGdV3E"
GAME_CONFIG_PDA="FK4oeyryrEGAmGf7n38sZ7T9Z2B2wVYNC3WiyyUa1sxJ"
TREASURY_PDA="Gh58fNwcBb1HxVFUshVyqzyCeYCkiugzHEMJVDtGUUEU"
TREASURY_WALLET="HLWTn3BYB3jvgquBG323XLyqzEj11H4N5m6EMpPGCCG6"
DEVNET_URL="https://api.devnet.solana.com"

# –§—É–Ω–∫—Ü–∏–∏
setup_environment() {
    echo "üîß Setting up environment..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ devnet
    CURRENT_CLUSTER=$(solana config get | grep "RPC URL" | awk '{print $3}')
    if [[ "$CURRENT_CLUSTER" != *"devnet"* ]]; then
        echo "‚ö†Ô∏è Switching to devnet..."
        solana config set --url devnet
    fi
    
    echo "üìç Current cluster: $(solana config get | grep 'RPC URL')"
    echo "üí≥ Current wallet: $(solana address)"
    echo "üí∞ Current balance: $(solana balance)"
}

check_game_state() {
    echo -e "\nüìä CHECKING GAME STATE..."
    echo "========================="
    
    echo "üéÆ Game State PDA: $GAME_STATE_PDA"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
    if solana account $GAME_STATE_PDA --output json &>/dev/null; then
        echo "‚úÖ Game State account exists"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ (Anchor CLI –º–æ–∂–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –µ—Å–ª–∏ IDL –¥–æ—Å—Ç—É–ø–µ–Ω)
        echo "üìä Game State data:"
        solana account $GAME_STATE_PDA --output json | jq -r '.account.data[0]' | base64 -d | xxd -l 100
    else
        echo "‚ùå Game State account not found"
        return 1
    fi
}

check_balances() {
    echo -e "\nüí∞ CHECKING BALANCES..."
    echo "======================="
    
    MY_WALLET=$(solana address)
    MY_BALANCE=$(solana balance --lamports)
    
    TREASURY_PDA_BALANCE=$(solana balance $TREASURY_PDA --lamports)
    TREASURY_WALLET_BALANCE=$(solana balance $TREASURY_WALLET --lamports)
    
    echo "üë§ My Wallet: $MY_WALLET"
    echo "üí∞ My Balance: $MY_BALANCE lamports ($(echo "scale=4; $MY_BALANCE / 1000000000" | bc) SOL)"
    echo ""
    echo "üè¶ Treasury PDA: $TREASURY_PDA"
    echo "üíé Treasury PDA Balance: $TREASURY_PDA_BALANCE lamports ($(echo "scale=4; $TREASURY_PDA_BALANCE / 1000000000" | bc) SOL)"
    echo ""
    echo "üëë Treasury Wallet: $TREASURY_WALLET"
    echo "üí∞ Treasury Wallet Balance: $TREASURY_WALLET_BALANCE lamports ($(echo "scale=4; $TREASURY_WALLET_BALANCE / 1000000000" | bc) SOL)"
}

request_airdrop() {
    echo -e "\nüí∞ REQUESTING AIRDROP..."
    echo "========================"
    
    MY_WALLET=$(solana address)
    echo "üéØ Target wallet: $MY_WALLET"
    
    echo "üì° Requesting 2 SOL..."
    if solana airdrop 2; then
        echo "‚úÖ Airdrop successful!"
        echo "üí∞ New balance: $(solana balance)"
    else
        echo "‚ùå Airdrop failed (–≤–æ–∑–º–æ–∂–Ω–æ –ª–∏–º–∏—Ç devnet)"
        echo "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ faucet: https://faucet.solana.com"
    fi
}

create_test_player() {
    echo -e "\nüë§ CREATING TEST PLAYER..."
    echo "=========================="
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    TEST_KEYPAIR=$(mktemp)
    solana-keygen new --no-bip39-passphrase --outfile $TEST_KEYPAIR --silent
    TEST_PUBKEY=$(solana-keygen pubkey $TEST_KEYPAIR)
    
    echo "üÜï Test player wallet: $TEST_PUBKEY"
    echo "üîë Keypair saved to: $TEST_KEYPAIR"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SOL –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
    echo "üí∏ Transferring 1 SOL to test player..."
    if solana transfer $TEST_PUBKEY 1 --allow-unfunded-recipient; then
        echo "‚úÖ Transfer successful"
        echo "üí∞ Test player balance: $(solana balance $TEST_PUBKEY)"
    else
        echo "‚ùå Transfer failed"
        return 1
    fi
    
    echo "üéØ You can now test with:"
    echo "   Player Address: $TEST_PUBKEY"
    echo "   Keypair File: $TEST_KEYPAIR"
}

show_anchor_commands() {
    echo -e "\nüîß ANCHOR COMMANDS FOR TESTING..."
    echo "=================================="
    
    MY_WALLET=$(solana address)
    
    echo "1Ô∏è‚É£ CREATE PLAYER:"
    echo "anchor run create-player --provider.cluster devnet"
    echo "   OR manually:"
    echo "   anchor invoke create_player --accounts owner:$MY_WALLET --provider.cluster devnet"
    
    echo ""
    echo "2Ô∏è‚É£ CHECK PLAYER DATA:"
    echo "anchor invoke get_player_data --provider.cluster devnet"
    
    echo ""
    echo "3Ô∏è‚É£ UPDATE EARNINGS:"
    echo "anchor invoke update_earnings --accounts player_owner:$MY_WALLET --provider.cluster devnet"
    
    echo ""
    echo "4Ô∏è‚É£ CLAIM EARNINGS:"
    echo "anchor invoke claim_earnings --accounts player_owner:$MY_WALLET --provider.cluster devnet"
    
    echo ""
    echo "5Ô∏è‚É£ GET GLOBAL STATS:"
    echo "anchor invoke get_global_stats --provider.cluster devnet"
}

show_program_addresses() {
    echo -e "\nüìç PROGRAM ADDRESSES..."
    echo "======================="
    echo "Program ID: $PROGRAM_ID"
    echo "Game State: $GAME_STATE_PDA"
    echo "Game Config: $GAME_CONFIG_PDA"
    echo "Treasury PDA: $TREASURY_PDA"
    echo "Treasury Wallet: $TREASURY_WALLET"
    echo "Network: devnet ($DEVNET_URL)"
}

# Main menu
show_menu() {
    echo -e "\nüéØ WHAT DO YOU WANT TO DO?"
    echo "========================="
    echo "1) Setup environment"
    echo "2) Check game state"
    echo "3) Check balances"
    echo "4) Request airdrop"
    echo "5) Create test player"
    echo "6) Show anchor commands"
    echo "7) Show program addresses"
    echo "8) Exit"
    echo ""
    read -p "Choose option (1-8): " choice
    
    case $choice in
        1) setup_environment ;;
        2) check_game_state ;;
        3) check_balances ;;
        4) request_airdrop ;;
        5) create_test_player ;;
        6) show_anchor_commands ;;
        7) show_program_addresses ;;
        8) echo "üëã Goodbye!"; exit 0 ;;
        *) echo "‚ùå Invalid option" ;;
    esac
}

# –ó–∞–ø—É—Å–∫
setup_environment
show_program_addresses

while true; do
    show_menu
    echo ""
    read -p "Press Enter to continue..."
done