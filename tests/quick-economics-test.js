const anchor = require("@coral-xyz/anchor");
const { SystemProgram, LAMPORTS_PER_SOL } = require("@solana/web3.js");
const assert = require("assert");

describe("‚ö° QUICK ECONOMICS TEST", () => {
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);
  
  const program = anchor.workspace.SolanaMafia; // üîß –î–û–ë–ê–í–õ–ï–ù–û
  
  // üîß –£–ù–ò–ö–ê–õ–¨–ù–´–ï PDA –¥–ª—è quick test
  const testSeed = `quick_${Date.now()}`;
  const treasuryWallet = anchor.web3.Keypair.generate();
  
  let gameStatePda, gameConfigPda, treasuryPda;
  let testPlayer;
  let testPlayerPda;

  before(async () => {
    console.log("‚ö° Starting Quick Economics Test...");
    
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ PDA –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    [gameStatePda] = await anchor.web3.PublicKey.findProgramAddress(
      [Buffer.from("game_state"), Buffer.from(testSeed)], program.programId
    );
    [gameConfigPda] = await anchor.web3.PublicKey.findProgramAddress(
      [Buffer.from("game_config"), Buffer.from(testSeed)], program.programId
    );
    [treasuryPda] = await anchor.web3.PublicKey.findProgramAddress(
      [Buffer.from("treasury"), Buffer.from(testSeed)], program.programId
    );

    testPlayer = anchor.web3.Keypair.generate();
    [testPlayerPda] = await anchor.web3.PublicKey.findProgramAddress(
      [Buffer.from("player"), testPlayer.publicKey.toBuffer()], program.programId
    );

    // Airdrop
    for (const keypair of [treasuryWallet, testPlayer]) {
      try {
        await provider.connection.confirmTransaction(
          await provider.connection.requestAirdrop(keypair.publicKey, 20 * LAMPORTS_PER_SOL)
        );
      } catch (error) {
        console.log("‚ö†Ô∏è Airdrop failed for", keypair.publicKey.toString());
      }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    try {
      await program.methods
        .initialize(treasuryWallet.publicKey)
        .accounts({
          authority: provider.wallet.publicKey,
          gameState: gameStatePda,
          gameConfig: gameConfigPda,
          treasuryPda: treasuryPda,
          systemProgram: SystemProgram.programId,
        })
        .rpc();

      console.log("‚úÖ Quick test game initialized");
    } catch (error) {
      console.log("‚ö†Ô∏è Quick test init error:", error.message);
      return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    try {
      await program.methods
        .createPlayer()
        .accounts({
          owner: testPlayer.publicKey,
          player: testPlayerPda,
          gameConfig: gameConfigPda,
          gameState: gameStatePda,
          treasuryWallet: treasuryWallet.publicKey,
          systemProgram: SystemProgram.programId,
        })
        .signers([testPlayer])
        .rpc();

      console.log("‚úÖ Quick test player created");
    } catch (error) {
      console.log("‚ö†Ô∏è Quick test player error:", error.message);
    }
  });

  it("–°–æ–∑–¥–∞–µ—Ç CryptoKiosk –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∫—É", async () => {
    try {
      const investment = new anchor.BN(1 * LAMPORTS_PER_SOL);
      
      await program.methods
        .createBusiness(0, investment)
        .accounts({
          owner: testPlayer.publicKey,
          player: testPlayerPda,
          gameConfig: gameConfigPda,
          gameState: gameStatePda,
          treasuryWallet: treasuryWallet.publicKey,
          treasuryPda: treasuryPda,
          systemProgram: SystemProgram.programId,
        })
        .signers([testPlayer])
        .rpc();

      const player = await program.account.player.fetch(testPlayerPda);
      const business = player.businesses[0];
      
      console.log("‚úÖ –ë–∏–∑–Ω–µ—Å —Å–æ–∑–¥–∞–Ω:", {
        type: "CryptoKiosk",
        invested: business.investedAmount.toString(),
        dailyRate: business.dailyRate,
        expectedDailyEarnings: (investment.toNumber() * 80) / 10000
      });

      assert.equal(business.dailyRate, 80);
      assert.equal(business.investedAmount.toNumber(), investment.toNumber());
    } catch (error) {
      console.log("‚ö†Ô∏è Business creation error:", error.message);
    }
  });

  it("–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ø–≥—Ä–µ–π–¥", async () => {
    try {
      await program.methods
        .upgradeBusiness(0)
        .accounts({
          playerOwner: testPlayer.publicKey,
          player: testPlayerPda,
          treasuryWallet: treasuryWallet.publicKey,
          gameState: gameStatePda,
          gameConfig: gameConfigPda,
          systemProgram: SystemProgram.programId,
        })
        .signers([testPlayer])
        .rpc();

      const player = await program.account.player.fetch(testPlayerPda);
      const business = player.businesses[0];
      
      console.log("‚¨ÜÔ∏è –ü–æ—Å–ª–µ –∞–ø–≥—Ä–µ–π–¥–∞:", {
        level: business.upgradeLevel,
        dailyRate: business.dailyRate
      });

      assert.equal(business.upgradeLevel, 1);
      assert(business.dailyRate > 80); // –î–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è
    } catch (error) {
      console.log("‚ö†Ô∏è Upgrade error:", error.message);
    }
  });

  it("–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", async () => {
    try {
      const gameState = await program.account.gameState.fetch(gameStatePda);
      const treasuryBalance = await provider.connection.getBalance(treasuryPda);
      const teamBalance = await provider.connection.getBalance(treasuryWallet.publicKey);
      
      console.log("üìä QUICK ECONOMICS SUMMARY:");
      console.log(`Players: ${gameState.totalPlayers.toString()}`);
      console.log(`Businesses: ${gameState.totalBusinesses.toString()}`);
      console.log(`Invested: ${gameState.totalInvested.toNumber() / LAMPORTS_PER_SOL} SOL`);
      console.log(`Treasury: ${treasuryBalance / LAMPORTS_PER_SOL} SOL`);
      console.log(`Team: ${teamBalance / LAMPORTS_PER_SOL} SOL`);
      
      assert(gameState.totalInvested.toNumber() > 0);
      assert(treasuryBalance > 0);
    } catch (error) {
      console.log("‚ö†Ô∏è Stats error:", error.message);
    }
  });
});