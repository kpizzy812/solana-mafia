const anchor = require("@coral-xyz/anchor");
const { SystemProgram, LAMPORTS_PER_SOL } = require("@solana/web3.js");
const assert = require("assert");

describe("üí∞ ECONOMICS & MATH TESTS", () => {
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  const program = anchor.workspace.SolanaMafia;
  const treasuryWallet = anchor.web3.Keypair.generate();
  
  let gameStatePda, gameConfigPda, treasuryPda;
  let investor1, investor2;
  let investor1Pda, investor2Pda;

  before(async () => {
    // Setup –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–∞—Ö
    [gameStatePda] = await anchor.web3.PublicKey.findProgramAddress(
      [Buffer.from("game_state")], program.programId
    );
    [gameConfigPda] = await anchor.web3.PublicKey.findProgramAddress(
      [Buffer.from("game_config")], program.programId
    );
    [treasuryPda] = await anchor.web3.PublicKey.findProgramAddress(
      [Buffer.from("treasury")], program.programId
    );

    investor1 = anchor.web3.Keypair.generate();
    investor2 = anchor.web3.Keypair.generate();

    [investor1Pda] = await anchor.web3.PublicKey.findProgramAddress(
      [Buffer.from("player"), investor1.publicKey.toBuffer()], program.programId
    );
    [investor2Pda] = await anchor.web3.PublicKey.findProgramAddress(
      [Buffer.from("player"), investor2.publicKey.toBuffer()], program.programId
    );

    // Airdrop –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    for (const keypair of [treasuryWallet, investor1, investor2]) {
      await provider.connection.confirmTransaction(
        await provider.connection.requestAirdrop(keypair.publicKey, 50 * LAMPORTS_PER_SOL)
      );
    }

    await program.methods
      .initialize(treasuryWallet.publicKey)
      .accounts({
        authority: provider.wallet.publicKey,
        gameState: gameStatePda,
        gameConfig: gameConfigPda,
        treasuryPda: treasuryPda,
        systemProgram: SystemProgram.programId,
      })
      .rpc();

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
    for (const [keypair, pda] of [[investor1, investor1Pda], [investor2, investor2Pda]]) {
      await program.methods
        .createPlayer()
        .accounts({
          owner: keypair.publicKey,
          player: pda,
          gameConfig: gameConfigPda,
          gameState: gameStatePda,
          treasuryWallet: treasuryWallet.publicKey,
          systemProgram: SystemProgram.programId,
        })
        .signers([keypair])
        .rpc();
    }
  });

  describe("üè™ –í—Å–µ —Ç–∏–ø—ã –±–∏–∑–Ω–µ—Å–æ–≤", () => {
    const businessTypes = [
      { name: "CryptoKiosk", investment: 0.1, expectedRate: 80 },
      { name: "MemeCasino", investment: 0.5, expectedRate: 90 },
      { name: "NFTLaundry", investment: 2, expectedRate: 100 },
      { name: "MiningFarm", investment: 5, expectedRate: 110 },
      { name: "DeFiEmpire", investment: 20, expectedRate: 130 },
      { name: "SolanaCartel", investment: 100, expectedRate: 150 },
    ];

    businessTypes.forEach((biz, index) => {
      it(`–°–æ–∑–¥–∞–µ—Ç ${biz.name} —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º rate`, async () => {
        const investment = new anchor.BN(biz.investment * LAMPORTS_PER_SOL);
        
        await program.methods
          .createBusiness(index, investment)
          .accounts({
            owner: investor1.publicKey,
            player: investor1Pda,
            gameConfig: gameConfigPda,
            gameState: gameStatePda,
            treasuryWallet: treasuryWallet.publicKey,
            treasuryPda: treasuryPda,
            systemProgram: SystemProgram.programId,
          })
          .signers([investor1])
          .rpc();

        const player = await program.account.player.fetch(investor1Pda);
        const business = player.businesses[player.businesses.length - 1];
        
        console.log(`‚úÖ ${biz.name}:`, {
          invested: business.investedAmount.toString(),
          dailyRate: business.dailyRate,
          expectedDaily: (investment.toNumber() * biz.expectedRate) / 10000
        });

        assert.equal(business.dailyRate, biz.expectedRate);
        assert.equal(business.investedAmount.toNumber(), investment.toNumber());
        
        // –ñ–¥–µ–º –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏—è–º–∏ (cooldown)
        if (index < businessTypes.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      });
    });
  });

  describe("üìà –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ earnings", () => {
    it("Earnings —Ä–∞—Å—Ç—É—Ç –ª–∏–Ω–µ–π–Ω–æ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º", async () => {
      const startTime = Date.now();
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –±–∏–∑–Ω–µ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await program.methods
        .createBusiness(0, new anchor.BN(1 * LAMPORTS_PER_SOL))
        .accounts({
          owner: investor2.publicKey,
          player: investor2Pda,
          gameConfig: gameConfigPda,
          gameState: gameStatePda,
          treasuryWallet: treasuryWallet.publicKey,
          treasuryPda: treasuryPda,
          systemProgram: SystemProgram.programId,
        })
        .signers([investor2])
        .rpc();

      // Measurements –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è
      const measurements = [];
      
      for (let i = 0; i < 3; i++) {
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        try {
          await program.methods
            .updateEarnings()
            .accounts({
              authority: investor2.publicKey,
              player: investor2Pda,
            })
            .signers([investor2])
            .rpc();

          const player = await program.account.player.fetch(investor2Pda);
          measurements.push({
            time: Date.now() - startTime,
            earnings: player.pendingEarnings.toNumber()
          });
          
          console.log(`T+${Math.round((Date.now() - startTime) / 1000)}s: ${player.pendingEarnings.toNumber()} lamports`);
        } catch (error) {
          if (!error.message.includes("TooEarlyToUpdate")) {
            console.log("Update error:", error.message);
          }
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ earnings —Ä–∞—Å—Ç—É—Ç
      if (measurements.length >= 2) {
        assert(measurements[measurements.length - 1].earnings >= measurements[0].earnings,
               "Earnings –¥–æ–ª–∂–Ω—ã —Ä–∞—Å—Ç–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º");
      }
    });

    it("ROI —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—è–≤–ª–µ–Ω–Ω–æ–º—É", async () => {
      const investment = 1 * LAMPORTS_PER_SOL; // 1 SOL
      const dailyRate = 80; // 0.8%
      
      const expectedDailyEarnings = (investment * dailyRate) / 10000;
      const expectedYearlyROI = (expectedDailyEarnings * 365) / investment;
      
      console.log("üìä ROI Analysis:");
      console.log(`Investment: ${investment / LAMPORTS_PER_SOL} SOL`);
      console.log(`Daily rate: ${dailyRate / 100}%`);
      console.log(`Expected daily earnings: ${expectedDailyEarnings / LAMPORTS_PER_SOL} SOL`);
      console.log(`Expected yearly ROI: ${(expectedYearlyROI * 100).toFixed(1)}%`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏
      assert(expectedYearlyROI > 2.5, "ROI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ 250% –≥–æ–¥–æ–≤—ã—Ö"); // 0.8% * 365 = 292%
      assert(expectedYearlyROI < 10, "ROI –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–º");
    });
  });

  describe("‚¨ÜÔ∏è –°–∏—Å—Ç–µ–º–∞ –∞–ø–≥—Ä–µ–π–¥–æ–≤", () => {
    it("–ê–ø–≥—Ä–µ–π–¥—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", async () => {
      const playerBefore = await program.account.player.fetch(investor2Pda);
      const businessBefore = playerBefore.businesses[0];
      const rateBefore = businessBefore.dailyRate;
      
      // –î–µ–ª–∞–µ–º –∞–ø–≥—Ä–µ–π–¥
      await program.methods
        .upgradeBusiness(0)
        .accounts({
          playerOwner: investor2.publicKey,
          player: investor2Pda,
          treasuryWallet: treasuryWallet.publicKey,
          gameState: gameStatePda,
          gameConfig: gameConfigPda,
          systemProgram: SystemProgram.programId,
        })
        .signers([investor2])
        .rpc();

      const playerAfter = await program.account.player.fetch(investor2Pda);
      const businessAfter = playerAfter.businesses[0];
      const rateAfter = businessAfter.dailyRate;
      
      console.log(`–ê–ø–≥—Ä–µ–π–¥: ${rateBefore} -> ${rateAfter} basis points`);
      console.log(`–£—Ä–æ–≤–µ–Ω—å: ${businessBefore.upgradeLevel} -> ${businessAfter.upgradeLevel}`);
      
      assert(rateAfter > rateBefore, "Rate –¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –∞–ø–≥—Ä–µ–π–¥–∞");
      assert.equal(businessAfter.upgradeLevel, businessBefore.upgradeLevel + 1);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞
      const gameConfig = await program.account.gameConfig.fetch(gameConfigPda);
      const upgradeCost = gameConfig.upgradeCosts[0]; // Level 1 cost
      console.log(`–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞: ${upgradeCost.toNumber() / LAMPORTS_PER_SOL} SOL`);
    });
  });

  describe("üí∏ Early sell fees", () => {
    it("Sell fees —É–º–µ–Ω—å—à–∞—é—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º", async () => {
      // –°–æ–∑–¥–∞–µ–º –±–∏–∑–Ω–µ—Å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
      await program.methods
        .createBusiness(1, new anchor.BN(0.5 * LAMPORTS_PER_SOL))
        .accounts({
          owner: investor1.publicKey,
          player: investor1Pda,
          gameConfig: gameConfigPda,
          gameState: gameStatePda,
          treasuryWallet: treasuryWallet.publicKey,
          treasuryPda: treasuryPda,
          systemProgram: SystemProgram.programId,
        })
        .signers([investor1])
        .rpc();

      const player = await program.account.player.fetch(investor1Pda);
      const latestBusiness = player.businesses[player.businesses.length - 1];
      
      console.log("üìÖ Sell fee simulation:");
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º fees –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–Ω–µ–π
      const daysToTest = [0, 7, 14, 21, 28, 35];
      const EARLY_SELL_FEES = [
        20, 20, 20, 20, 20, 20, 20, // Days 0-6: 20%
        15, 15, 15, 15, 15, 15, 15, // Days 7-13: 15%
        10, 10, 10, 10, 10, 10, 10, // Days 14-20: 10%
        7,  7,  7,  7,  7,  7,  7,  // Days 21-27: 7%
        5,  5,  5,  2,              // Days 28-30: 5%, final: 2%
      ];
      
      daysToTest.forEach(days => {
        const feePercent = days < EARLY_SELL_FEES.length ? EARLY_SELL_FEES[days] : 2;
        const investment = latestBusiness.investedAmount.toNumber();
        const fee = (investment * feePercent) / 100;
        const returnAmount = investment - fee;
        
        console.log(`–î–µ–Ω—å ${days}: fee ${feePercent}%, –≤–æ–∑–≤—Ä–∞—Ç ${(returnAmount / LAMPORTS_PER_SOL).toFixed(3)} SOL`);
      });

      // –ü—Ä–æ–¥–∞–µ–º –±–∏–∑–Ω–µ—Å (—Ä–∞–Ω–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞ —Å –≤—ã—Å–æ–∫–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π)
      const businessIndex = player.businesses.length - 1;
      
      try {
        await program.methods
          .sellBusiness(businessIndex)
          .accounts({
            playerOwner: investor1.publicKey,
            player: investor1Pda,
            treasuryPda: treasuryPda,
            gameState: gameStatePda,
            systemProgram: SystemProgram.programId,
          })
          .signers([investor1])
          .rpc();

        console.log("‚úÖ –ë–∏–∑–Ω–µ—Å –ø—Ä–æ–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
      } catch (error) {
        console.log("Sell error:", error.message);
      }
    });
  });

  describe("üí∞ Fee distribution", () => {
    it("20% –∫–æ–º–∞–Ω–¥–µ, 80% –≤ –∏–≥—Ä–æ–≤–æ–π –ø—É–ª", async () => {
      const teamBalanceBefore = await provider.connection.getBalance(treasuryWallet.publicKey);
      const treasuryBalanceBefore = await provider.connection.getBalance(treasuryPda);
      
      const investment = new anchor.BN(10 * LAMPORTS_PER_SOL); // 10 SOL
      
      await program.methods
        .createBusiness(2, investment) // NFTLaundry
        .accounts({
          owner: investor1.publicKey,
          player: investor1Pda,
          gameConfig: gameConfigPda,
          gameState: gameStatePda,
          treasuryWallet: treasuryWallet.publicKey,
          treasuryPda: treasuryPda,
          systemProgram: SystemProgram.programId,
        })
        .signers([investor1])
        .rpc();

      const teamBalanceAfter = await provider.connection.getBalance(treasuryWallet.publicKey);
      const treasuryBalanceAfter = await provider.connection.getBalance(treasuryPda);
      
      const teamIncrease = teamBalanceAfter - teamBalanceBefore;
      const treasuryIncrease = treasuryBalanceAfter - treasuryBalanceBefore;
      
      console.log("üí∞ Fee Distribution:");
      console.log(`Team received: ${teamIncrease / LAMPORTS_PER_SOL} SOL`);
      console.log(`Treasury received: ${treasuryIncrease / LAMPORTS_PER_SOL} SOL`);
      console.log(`Total: ${(teamIncrease + treasuryIncrease) / LAMPORTS_PER_SOL} SOL`);
      
      const expectedTeamFee = investment.toNumber() * 0.2; // 20%
      const expectedTreasuryFee = investment.toNumber() * 0.8; // 80%
      
      console.log(`Expected team: ${expectedTeamFee / LAMPORTS_PER_SOL} SOL`);
      console.log(`Expected treasury: ${expectedTreasuryFee / LAMPORTS_PER_SOL} SOL`);
      
      // –ü–æ–∑–≤–æ–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –∏–∑-–∑–∞ transaction fees
      const tolerance = 0.01 * LAMPORTS_PER_SOL;
      assert(Math.abs(teamIncrease - expectedTeamFee) < tolerance, "Team fee –Ω–µ—Ç–æ—á–Ω—ã–π");
      assert(Math.abs(treasuryIncrease - expectedTreasuryFee) < tolerance, "Treasury fee –Ω–µ—Ç–æ—á–Ω—ã–π");
    });
  });

  describe("üìä Final Economics Report", () => {
    it("–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç–∏–Ω—É", async () => {
      const gameState = await program.account.gameState.fetch(gameStatePda);
      const gameConfig = await program.account.gameConfig.fetch(gameConfigPda);
      const treasuryBalance = await provider.connection.getBalance(treasuryPda);
      const teamBalance = await provider.connection.getBalance(treasuryWallet.publicKey);
      
      console.log("\nüí∞ ECONOMICS SUMMARY:");
      console.log("=".repeat(50));
      
      console.log("\nüìà Game Statistics:");
      console.log(`Total Players: ${gameState.totalPlayers.toString()}`);
      console.log(`Total Businesses: ${gameState.totalBusinesses.toString()}`);
      console.log(`Total Invested: ${gameState.totalInvested.toNumber() / LAMPORTS_PER_SOL} SOL`);
      console.log(`Total Withdrawn: ${gameState.totalWithdrawn.toNumber() / LAMPORTS_PER_SOL} SOL`);
      console.log(`Treasury Collected: ${gameState.totalTreasuryCollected.toNumber() / LAMPORTS_PER_SOL} SOL`);
      
      console.log("\nüí≥ Balances:");
      console.log(`Game Pool (Treasury PDA): ${treasuryBalance / LAMPORTS_PER_SOL} SOL`);
      console.log(`Team Wallet: ${teamBalance / LAMPORTS_PER_SOL} SOL`);
      
      console.log("\n‚öôÔ∏è Configuration:");
      console.log(`Entry Fee: ${gameConfig.entryFee.toNumber() / LAMPORTS_PER_SOL} SOL`);
      console.log(`Treasury Fee: ${gameConfig.treasuryFeePercent}%`);
      console.log(`Business Rates: [${gameConfig.businessRates.join(', ')}] basis points`);
      
      const totalSystemValue = treasuryBalance + teamBalance;
      const investedVsWithdrawn = gameState.totalInvested.toNumber() - gameState.totalWithdrawn.toNumber();
      
      console.log("\nüè• Health Metrics:");
      console.log(`System Value: ${totalSystemValue / LAMPORTS_PER_SOL} SOL`);
      console.log(`Pending Obligations: ${investedVsWithdrawn / LAMPORTS_PER_SOL} SOL`);
      console.log(`Coverage Ratio: ${((treasuryBalance / investedVsWithdrawn) * 100).toFixed(1)}%`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
      assert(treasuryBalance > 0, "Treasury –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞");
      assert(treasuryBalance >= investedVsWithdrawn * 0.5, "Treasury –¥–æ–ª–∂–µ–Ω –ø–æ–∫—Ä—ã–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º 50% –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤");
      assert(gameState.totalInvested.toNumber() >= gameState.totalWithdrawn.toNumber(), 
             "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ >= –≤—ã–≤–æ–¥–æ–≤");
      
      console.log("\n‚úÖ Economic Health: HEALTHY");
      console.log("=".repeat(50));
    });
  });
});