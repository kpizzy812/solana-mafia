const anchor = require("@coral-xyz/anchor");

describe("solana-mafia", () => {
  // Configure the client to use the local cluster.
  anchor.setProvider(anchor.AnchorProvider.env());
  
  const program = anchor.workspace.SolanaMafia;
  const provider = anchor.getProvider();

  it("Initializes the game successfully", async () => {
    // Treasury wallet (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π –∫–æ—à–µ–ª–µ–∫)
    const treasuryWallet = anchor.web3.Keypair.generate().publicKey;
    
    // –ù–∞–π–¥–µ–º PDA –¥–ª—è GameState –∏ GameConfig
    const [gameStatePda] = anchor.web3.PublicKey.findProgramAddressSync(
      [Buffer.from("game_state")],
      program.programId
    );
    
    const [gameConfigPda] = anchor.web3.PublicKey.findProgramAddressSync(
      [Buffer.from("game_config")], 
      program.programId
    );

    console.log("Game State PDA:", gameStatePda.toString());
    console.log("Game Config PDA:", gameConfigPda.toString());
    console.log("Treasury Wallet:", treasuryWallet.toString());

    // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é initialize
    try {
      const tx = await program.methods
        .initialize(treasuryWallet)
        .accounts({
          authority: provider.wallet.publicKey,
          gameState: gameStatePda,
          gameConfig: gameConfigPda,
          systemProgram: anchor.web3.SystemProgram.programId,
        })
        .rpc();

      console.log("‚úÖ Initialize transaction signature:", tx);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç—ã —Å–æ–∑–¥–∞–ª–∏—Å—å
      const gameState = await program.account.gameState.fetch(gameStatePda);
      const gameConfig = await program.account.gameConfig.fetch(gameConfigPda);

      console.log("üéÆ Game State:", {
        authority: gameState.authority.toString(),
        treasuryWallet: gameState.treasuryWallet.toString(),
        totalPlayers: gameState.totalPlayers.toString(),
        totalInvested: gameState.totalInvested.toString(),
        isPaused: gameState.isPaused,
      });

      console.log("‚öôÔ∏è Game Config:", {
        authority: gameConfig.authority.toString(),
        entryFee: gameConfig.entryFee.toString(),
        treasuryFeePercent: gameConfig.treasuryFeePercent,
        maxBusinessesPerPlayer: gameConfig.maxBusinessesPerPlayer,
        registrationsOpen: gameConfig.registrationsOpen,
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      console.assert(gameState.authority.equals(provider.wallet.publicKey), "Authority –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å");
      console.assert(gameState.treasuryWallet.equals(treasuryWallet), "Treasury wallet –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å");
      console.assert(gameState.totalPlayers.eq(new anchor.BN(0)), "–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0");
      console.assert(!gameState.isPaused, "–ò–≥—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –ø–∞—É–∑–µ");
      
      console.log("üéØ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!");

    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
      throw error;
    }
  });
});