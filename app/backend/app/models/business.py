"""
Business and BusinessSlot models - mirror on-chain business data.
"""

from datetime import datetime
from typing import Optional
from enum import Enum

from sqlalchemy import (
    String, Integer, BigInteger, Boolean, Enum as SQLEnum, 
    ForeignKey, Index, Text
)
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .base import BaseModel, TimestampMixin


class BusinessType(Enum):
    """Business types matching on-chain enum."""
    LEMONADE_STAND = 0
    CAR_WASH = 1
    RESTAURANT = 2
    TECH_STARTUP = 3
    CRYPTO_EXCHANGE = 4


class SlotType(Enum):
    """Slot types matching on-chain enum."""
    BASIC = 0
    PREMIUM = 1
    VIP = 2
    LEGENDARY = 3


class Business(BaseModel, TimestampMixin):
    """Business model representing individual business instances."""
    
    __tablename__ = "businesses"
    
    # Primary key
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    
    # Foreign keys
    player_wallet: Mapped[str] = mapped_column(
        String(44),
        ForeignKey("players.wallet", ondelete="CASCADE"),
        comment="Owner's wallet address"
    )
    
    nft_mint: Mapped[Optional[str]] = mapped_column(
        String(44),
        ForeignKey("business_nfts.mint", ondelete="SET NULL"),
        comment="Associated NFT mint address",
        index=True
    )
    
    # Business properties
    business_type: Mapped[BusinessType] = mapped_column(
        SQLEnum(BusinessType),
        comment="Type of business"
    )
    
    level: Mapped[int] = mapped_column(
        Integer,
        default=1,
        comment="Business upgrade level"
    )
    
    # Investment tracking
    base_cost: Mapped[int] = mapped_column(
        BigInteger,
        comment="Base cost of business in lamports"
    )
    
    total_invested_amount: Mapped[int] = mapped_column(
        BigInteger,
        comment="Total invested including upgrades in lamports"
    )
    
    upgrade_costs: Mapped[Optional[str]] = mapped_column(
        Text,
        comment="JSON array of upgrade costs"
    )
    
    # Earnings properties
    daily_rate: Mapped[int] = mapped_column(
        Integer,
        comment="Daily rate in basis points (100 = 1%)"
    )
    
    last_claim_time: Mapped[Optional[datetime]] = mapped_column(
        comment="Last earnings claim timestamp"
    )
    
    total_earnings_generated: Mapped[int] = mapped_column(
        BigInteger,
        default=0,
        comment="Total earnings generated by this business"
    )
    
    # Status
    is_active: Mapped[bool] = mapped_column(
        Boolean,
        default=True,
        comment="Whether business is active and earning"
    )
    
    # Slot information
    slot_index: Mapped[Optional[int]] = mapped_column(
        Integer,
        comment="Index of slot this business occupies"
    )
    
    # On-chain tracking
    creation_signature: Mapped[Optional[str]] = mapped_column(
        String(88),
        comment="Transaction signature when business was created"
    )
    
    on_chain_created_at: Mapped[Optional[datetime]] = mapped_column(
        comment="Creation timestamp from blockchain"
    )
    
    last_sync_at: Mapped[Optional[datetime]] = mapped_column(
        comment="Last sync with on-chain data"
    )
    
    # Relationships
    player: Mapped["Player"] = relationship(
        "Player",
        back_populates="businesses"
    )
    
    nft: Mapped[Optional["BusinessNFT"]] = relationship(
        "BusinessNFT",
        back_populates="business"
    )
    
    # Indexes
    __table_args__ = (
        Index("idx_business_player_active", "player_wallet", "is_active"),
        Index("idx_business_type_level", "business_type", "level"),
        Index("idx_business_nft", "nft_mint"),
        Index("idx_business_slot", "player_wallet", "slot_index"),
    )
    
    def __repr__(self) -> str:
        return f"<Business(id={self.id}, type={self.business_type.name}, level={self.level})>"
    
    @property
    def name(self) -> str:
        """Get business display name."""
        business_names = {
            BusinessType.LEMONADE_STAND: "Lemonade Stand",
            BusinessType.CAR_WASH: "Car Wash",
            BusinessType.RESTAURANT: "Restaurant", 
            BusinessType.TECH_STARTUP: "Tech Startup",
            BusinessType.CRYPTO_EXCHANGE: "Crypto Exchange"
        }
        return business_names.get(self.business_type, "Unknown Business")
    
    @property
    def daily_earnings_estimate(self) -> int:
        """Calculate estimated daily earnings in lamports."""
        return (self.total_invested_amount * self.daily_rate) // 10000
    
    def calculate_pending_earnings(self, current_time: datetime) -> int:
        """Calculate pending earnings since last claim."""
        if not self.is_active or not self.last_claim_time:
            return 0
        
        time_diff = current_time - self.last_claim_time
        days = time_diff.total_seconds() / 86400  # Convert to days
        
        daily_earnings = self.daily_earnings_estimate
        return int(daily_earnings * days)


class BusinessSlot(BaseModel, TimestampMixin):
    """Business slot model for slot-based system."""
    
    __tablename__ = "business_slots"
    
    # Primary key
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    
    # Foreign key
    player_wallet: Mapped[str] = mapped_column(
        String(44),
        ForeignKey("players.wallet", ondelete="CASCADE"),
        comment="Owner's wallet address"
    )
    
    # Slot properties
    slot_index: Mapped[int] = mapped_column(
        Integer,
        comment="Slot index (0-based)"
    )
    
    slot_type: Mapped[SlotType] = mapped_column(
        SQLEnum(SlotType),
        default=SlotType.BASIC,
        comment="Type of slot"
    )
    
    is_unlocked: Mapped[bool] = mapped_column(
        Boolean,
        default=False,
        comment="Whether slot is unlocked"
    )
    
    unlock_cost_paid: Mapped[int] = mapped_column(
        BigInteger,
        default=0,
        comment="Cost paid to unlock this slot"
    )
    
    # Business in slot
    business_id: Mapped[Optional[int]] = mapped_column(
        Integer,
        ForeignKey("businesses.id", ondelete="SET NULL"),
        comment="Business currently in this slot"
    )
    
    # Bonuses
    yield_bonus: Mapped[int] = mapped_column(
        Integer,
        default=0,
        comment="Yield bonus in basis points"
    )
    
    sell_fee_discount: Mapped[int] = mapped_column(
        Integer,
        default=0,
        comment="Sell fee discount percentage"
    )
    
    # Tracking
    unlock_signature: Mapped[Optional[str]] = mapped_column(
        String(88),
        comment="Transaction signature when slot was unlocked"
    )
    
    # Relationships
    player: Mapped["Player"] = relationship("Player")
    business: Mapped[Optional["Business"]] = relationship("Business")
    
    # Indexes
    __table_args__ = (
        Index("idx_slot_player_index", "player_wallet", "slot_index", unique=True),
        Index("idx_slot_player_unlocked", "player_wallet", "is_unlocked"),
        Index("idx_slot_type", "slot_type"),
    )
    
    def __repr__(self) -> str:
        return f"<BusinessSlot(player={self.player_wallet}, index={self.slot_index}, type={self.slot_type.name})>"
    
    @property
    def is_occupied(self) -> bool:
        """Check if slot has a business."""
        return self.business_id is not None
    
    def get_bonuses(self) -> dict:
        """Get slot bonuses based on type."""
        bonuses = {
            SlotType.BASIC: {"yield": 0, "sell_discount": 0},
            SlotType.PREMIUM: {"yield": 150, "sell_discount": 0},  # +1.5%
            SlotType.VIP: {"yield": 300, "sell_discount": 50},     # +3%, -50% sell fee
            SlotType.LEGENDARY: {"yield": 500, "sell_discount": 100}, # +5%, -100% sell fee
        }
        return bonuses.get(self.slot_type, bonuses[SlotType.BASIC])