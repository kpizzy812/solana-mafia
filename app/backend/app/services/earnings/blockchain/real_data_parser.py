"""
üîó –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–∞ –¥–ª—è earnings

–ó–∞–º–µ–Ω—è–µ—Ç mock –ø–∞—Ä—Å–µ—Ä –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Anchor –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import struct
from datetime import datetime, timezone
from solders.pubkey import Pubkey

from app.services.earnings.core.types import PlayerAccountData


class RealDataParser:
    """
    –ü–∞—Ä—Å–µ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Player –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞.
    
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ PlayerCompact –∞–∫–∫–∞—É–Ω—Ç–∞ (–∏–∑ Rust):
    - discriminator: [u8; 8] 
    - pending_earnings: u64
    - next_earnings_time: u32  
    - last_auto_update: u32
    - businesses_slots: [BusinessSlotCompact; 15]
    - ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
    """
    
    def parse_player_account_data(self, wallet: str, pda: Pubkey, data: bytes) -> PlayerAccountData:
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Player –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞."""
        try:
            if len(data) < 1400:  # PlayerCompact –º–∏–Ω–∏–º—É–º ~1350+ –±–∞–π—Ç
                raise ValueError(f"Account data too small: {len(data)} bytes")
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ offset'—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã PlayerCompact:
            # 1. discriminator (8 bytes)
            # 2. owner: Pubkey (32 bytes)  
            # 3. business_slots: [BusinessSlotCompact; 15] (15 * 83 = 1245 bytes)
            # 4. unlocked_slots_count: u8 (1 byte)
            # 5. premium_slots_count: u8 (1 byte)
            # 6. flags: u32 (4 bytes)
            # 7. total_invested: u64 (8 bytes)
            # 8. total_upgrade_spent: u64 (8 bytes)
            # 9. total_slot_spent: u64 (8 bytes)
            # 10. total_earned: u64 (8 bytes)
            # 11. pending_earnings: u64 (8 bytes) ‚Üê –≠–¢–û –ù–ê–ú –ù–£–ñ–ù–û
            
            pending_earnings_offset = 8 + 32 + 1245 + 1 + 1 + 4 + 8 + 8 + 8 + 8  # = 1323
            next_earnings_offset = pending_earnings_offset + 8 + 4  # +pending_earnings, +created_at = 1335
            last_auto_update_offset = next_earnings_offset + 4 + 4 + 4  # +next_earnings_time, +earnings_interval, +first_business_time = 1347
            
            # –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (little-endian)
            pending_earnings = struct.unpack('<Q', data[pending_earnings_offset:pending_earnings_offset+8])[0]
            next_earnings_time = struct.unpack('<I', data[next_earnings_offset:next_earnings_offset+4])[0]
            last_auto_update = struct.unpack('<I', data[last_auto_update_offset:last_auto_update_offset+4])[0]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–µ–ª–æ–≤ PostgreSQL BIGINT (max = 9,223,372,036,854,775,807)
            MAX_BIGINT = 9_223_372_036_854_775_807
            if pending_earnings > MAX_BIGINT:
                print(f"‚ö†Ô∏è Warning: pending_earnings {pending_earnings} exceeds PostgreSQL BIGINT, capping to {MAX_BIGINT}")
                pending_earnings = MAX_BIGINT
            
            # –ü–æ–¥—Å—á–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã)
            businesses_count = 0
            try:
                # –ö–∞–∂–¥—ã–π —Å–ª–æ—Ç BusinessSlotCompact = 4 –±–∞–π—Ç–∞
                # 15 —Å–ª–æ—Ç–æ–≤ = 60 –±–∞–π—Ç
                if offset + 60 <= len(data):
                    slots_data = data[offset:offset+60]
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                    for i in range(0, 60, 4):
                        slot_value = struct.unpack('<I', slots_data[i:i+4])[0]
                        if slot_value > 0:  # –ù–µ–ø—É—Å—Ç–æ–π —Å–ª–æ—Ç
                            businesses_count += 1
            except:
                businesses_count = 1  # Default –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            current_time = int(datetime.now(timezone.utc).timestamp())
            needs_update = next_earnings_time <= current_time
            
            return PlayerAccountData(
                wallet=wallet,
                pubkey=pda,
                pending_earnings=pending_earnings,
                next_earnings_time=next_earnings_time,
                last_auto_update=last_auto_update,
                businesses_count=businesses_count,
                needs_update=needs_update,
                raw_data=data
            )
            
        except Exception as e:
            # Fallback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
            print(f"‚ö†Ô∏è Error parsing real data for {wallet}: {e}")
            print(f"   Data size: {len(data)} bytes")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current_time = int(datetime.now(timezone.utc).timestamp())
            
            return PlayerAccountData(
                wallet=wallet,
                pubkey=pda,
                pending_earnings=0,
                next_earnings_time=current_time + 86400,  # Next day
                last_auto_update=current_time - 3600,     # 1 hour ago
                businesses_count=1,
                needs_update=False,  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                raw_data=data
            )