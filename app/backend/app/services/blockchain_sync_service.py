"""
Blockchain Sync Service - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å blockchain.

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- Blockchain –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π source of truth
- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –î–µ—Ç–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –ú–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
"""

import asyncio
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta
from enum import Enum
import structlog

from sqlalchemy import select, delete, and_
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.database import get_async_session
from app.models.player import Player
from app.models.business import Business
from app.services.pda_validator import get_pda_validator, SyncReport
from app.services.player_business_sync import get_player_business_sync_service


logger = structlog.get_logger(__name__)


class SyncAction(Enum):
    """–¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    PLAYER_REMOVED = "player_removed"
    BUSINESS_REMOVED = "business_removed"
    BUSINESS_SYNCED = "business_synced"
    PORTFOLIO_VALIDATED = "portfolio_validated"
    DATA_VALIDATED = "data_validated"
    SYNC_COMPLETED = "sync_completed"


@dataclass
class SyncOperation:
    """–ó–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    action: SyncAction
    target_type: str  # 'player' –∏–ª–∏ 'business'
    target_id: str
    reason: str
    timestamp: datetime
    details: Optional[Dict[str, Any]] = None


@dataclass
class SyncSessionReport:
    """–û—Ç—á–µ—Ç –æ —Å–µ—Å—Å–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    session_id: str
    started_at: datetime
    completed_at: Optional[datetime]
    players_checked: int
    players_removed: int
    businesses_removed: int
    players_business_synced: int
    businesses_added: int
    businesses_updated: int
    portfolio_discrepancies: int
    operations: List[SyncOperation]
    success: bool
    error: Optional[str] = None
    
    @property
    def duration_seconds(self) -> Optional[float]:
        if self.completed_at and self.started_at:
            return (self.completed_at - self.started_at).total_seconds()
        return None


class BlockchainSyncService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å blockchain —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–∞–∑–µ
    - –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–Ω–µ—Ç –≤ blockchain)
    - –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤
    - –ê—É–¥–∏—Ç –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è sync —Å–µ—Ä–≤–∏—Å–∞."""
        self.logger = logger.bind(service="blockchain_sync")
        self.is_running = False
        self.sync_interval = timedelta(hours=1)  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
        self.last_sync: Optional[datetime] = None
        self.sync_task: Optional[asyncio.Task] = None
        
        # –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
        self.operation_history: List[SyncOperation] = []
        self.session_history: List[SyncSessionReport] = []
        
        self.logger.info("Blockchain Sync Service initialized", sync_interval_hours=1)
    
    async def start_periodic_sync(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        if self.is_running:
            self.logger.warning("Periodic sync already running")
            return
        
        self.is_running = True
        self.sync_task = asyncio.create_task(self._sync_loop())
        self.logger.info("Periodic blockchain sync started")
    
    async def stop_periodic_sync(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        if not self.is_running:
            return
        
        self.is_running = False
        if self.sync_task and not self.sync_task.done():
            self.sync_task.cancel()
            try:
                await self.sync_task
            except asyncio.CancelledError:
                pass
        
        self.logger.info("Periodic blockchain sync stopped")
    
    async def _sync_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        self.logger.info("Sync loop started")
        
        while self.is_running:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                report = await self.perform_full_sync()
                
                if report.success:
                    self.logger.info(
                        "Periodic sync completed successfully",
                        players_checked=report.players_checked,
                        players_removed=report.players_removed,
                        businesses_removed=report.businesses_removed,
                        players_business_synced=report.players_business_synced,
                        businesses_added=report.businesses_added,
                        businesses_updated=report.businesses_updated,
                        portfolio_discrepancies=report.portfolio_discrepancies,
                        duration=f"{report.duration_seconds:.1f}s"
                    )
                else:
                    self.logger.error(
                        "Periodic sync failed",
                        error=report.error,
                        duration=f"{report.duration_seconds:.1f}s" if report.duration_seconds else None
                    )
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                await asyncio.sleep(self.sync_interval.total_seconds())
                
            except asyncio.CancelledError:
                self.logger.info("Sync loop cancelled")
                break
            except Exception as e:
                self.logger.error("Sync loop error", error=str(e))
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
    
    async def perform_full_sync(self) -> SyncSessionReport:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å blockchain.
        
        Returns:
            SyncSessionReport —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        session_id = f"sync_{int(datetime.utcnow().timestamp())}"
        started_at = datetime.utcnow()
        
        self.logger.info("Starting full blockchain sync", session_id=session_id)
        
        report = SyncSessionReport(
            session_id=session_id,
            started_at=started_at,
            completed_at=None,
            players_checked=0,
            players_removed=0,
            businesses_removed=0,
            players_business_synced=0,
            businesses_added=0,
            businesses_updated=0,
            portfolio_discrepancies=0,
            operations=[],
            success=False
        )
        
        try:
            async with get_async_session() as db:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã
                result = await db.execute(
                    select(Player.wallet).where(Player.is_active == True)
                )
                db_players = [row[0] for row in result.fetchall()]
                report.players_checked = len(db_players)
                
                if not db_players:
                    self.logger.info("No players found in database")
                    report.success = True
                    report.completed_at = datetime.utcnow()
                    return report
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ blockchain
                validator = await get_pda_validator()
                validation_results = await validator.batch_validate_players(db_players)
                
                # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –≤–∞–ª–∏–¥–Ω—ã—Ö PDA
                invalid_players = [
                    result.wallet for result in validation_results 
                    if not result.is_valid
                ]
                
                if invalid_players:
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–Ω—Ç–æ–º–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö –±–∏–∑–Ω–µ—Å—ã
                    removed_counts = await self._remove_invalid_players(db, invalid_players, report)
                    report.players_removed = removed_counts['players']
                    report.businesses_removed = removed_counts['businesses']
                    
                    await db.commit()
                    
                    self.logger.warning(
                        "Removed invalid players from database",
                        session_id=session_id,
                        removed_players=report.players_removed,
                        removed_businesses=report.businesses_removed,
                        invalid_wallets=invalid_players[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    )
                else:
                    self.logger.info("All players in database are valid", session_id=session_id)
                
                # üè¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å—ã –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
                valid_players = [
                    result.wallet for result in validation_results 
                    if result.is_valid
                ]
                
                if valid_players:
                    business_sync_stats = await self._sync_player_businesses(
                        valid_players, report, session_id
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    report.players_business_synced = business_sync_stats['players_synced']
                    report.businesses_added = business_sync_stats['businesses_added']
                    report.businesses_updated = business_sync_stats['businesses_updated']
                    report.portfolio_discrepancies = business_sync_stats['portfolio_discrepancies']
                    
                    await db.commit()
                    
                    self.logger.info(
                        "Business sync completed",
                        session_id=session_id,
                        players_synced=report.players_business_synced,
                        businesses_added=report.businesses_added,
                        businesses_updated=report.businesses_updated,
                        portfolio_discrepancies=report.portfolio_discrepancies
                    )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                operation = SyncOperation(
                    action=SyncAction.SYNC_COMPLETED,
                    target_type="sync_session",
                    target_id=session_id,
                    reason="Full sync completed successfully",
                    timestamp=datetime.utcnow(),
                    details={
                        "players_checked": report.players_checked,
                        "players_removed": report.players_removed,
                        "businesses_removed": report.businesses_removed,
                        "players_business_synced": report.players_business_synced,
                        "businesses_added": report.businesses_added,
                        "businesses_updated": report.businesses_updated,
                        "portfolio_discrepancies": report.portfolio_discrepancies
                    }
                )
                report.operations.append(operation)
                self._add_operation_to_history(operation)
                
                report.success = True
                report.completed_at = datetime.utcnow()
                self.last_sync = report.completed_at
        
        except Exception as e:
            error_msg = f"Sync failed: {str(e)}"
            report.error = error_msg
            report.completed_at = datetime.utcnow()
            
            self.logger.error("Full sync failed", session_id=session_id, error=error_msg)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.session_history.append(report)
        self._cleanup_history()
        
        return report
    
    async def _remove_invalid_players(
        self, 
        db: AsyncSession, 
        invalid_wallets: List[str],
        report: SyncSessionReport
    ) -> Dict[str, int]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            db: Database session
            invalid_wallets: –°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            report: –û—Ç—á–µ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        removed_counts = {"players": 0, "businesses": 0}
        
        for wallet in invalid_wallets:
            try:
                # –£–¥–∞–ª—è–µ–º –±–∏–∑–Ω–µ—Å—ã –∏–≥—Ä–æ–∫–∞
                business_result = await db.execute(
                    delete(Business).where(Business.player_wallet == wallet)
                )
                businesses_removed = business_result.rowcount
                removed_counts["businesses"] += businesses_removed
                
                if businesses_removed > 0:
                    operation = SyncOperation(
                        action=SyncAction.BUSINESS_REMOVED,
                        target_type="business",
                        target_id=f"player_{wallet}",
                        reason="Player PDA not found in blockchain",
                        timestamp=datetime.utcnow(),
                        details={"businesses_count": businesses_removed}
                    )
                    report.operations.append(operation)
                    self._add_operation_to_history(operation)
                
                # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
                player_result = await db.execute(
                    delete(Player).where(Player.wallet == wallet)
                )
                players_removed = player_result.rowcount
                removed_counts["players"] += players_removed
                
                if players_removed > 0:
                    operation = SyncOperation(
                        action=SyncAction.PLAYER_REMOVED,
                        target_type="player",
                        target_id=wallet,
                        reason="Player PDA not found in blockchain",
                        timestamp=datetime.utcnow(),
                        details={"businesses_removed": businesses_removed}
                    )
                    report.operations.append(operation)
                    self._add_operation_to_history(operation)
                    
                    self.logger.info(
                        "Removed invalid player",
                        wallet=wallet,
                        businesses_removed=businesses_removed
                    )
                
            except Exception as e:
                self.logger.error(
                    "Failed to remove invalid player",
                    wallet=wallet,
                    error=str(e)
                )
        
        return removed_counts
    
    async def _sync_player_businesses(
        self, 
        valid_players: List[str], 
        report: SyncSessionReport,
        session_id: str
    ) -> Dict[str, int]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.
        
        Args:
            valid_players: –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö wallet –∞–¥—Ä–µ—Å–æ–≤
            report: –û—Ç—á–µ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ–ø–µ—Ä–∞—Ü–∏–π  
            session_id: ID —Å–µ—Å—Å–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–æ–≤
        """
        business_sync_service = await get_player_business_sync_service()
        
        stats = {
            "players_synced": 0,
            "businesses_added": 0,
            "businesses_updated": 0,
            "businesses_removed": 0,
            "portfolio_discrepancies": 0
        }
        
        for wallet in valid_players:
            try:
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å—ã –∏–≥—Ä–æ–∫–∞
                sync_result = await business_sync_service.sync_player_businesses(wallet)
                
                if sync_result.get("success", False):
                    stats["players_synced"] += 1
                    stats["businesses_added"] += sync_result.get("businesses_added", 0)
                    stats["businesses_updated"] += sync_result.get("businesses_updated", 0)
                    stats["businesses_removed"] += sync_result.get("businesses_removed", 0)
                    
                    if sync_result.get("portfolio_corrected", False):
                        stats["portfolio_discrepancies"] += 1
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    operation = SyncOperation(
                        action=SyncAction.BUSINESS_SYNCED,
                        target_type="player_business",
                        target_id=wallet,
                        reason="Player businesses synchronized with blockchain",
                        timestamp=datetime.utcnow(),
                        details={
                            "businesses_added": sync_result.get("businesses_added", 0),
                            "businesses_updated": sync_result.get("businesses_updated", 0),
                            "businesses_removed": sync_result.get("businesses_removed", 0),
                            "portfolio_corrected": sync_result.get("portfolio_corrected", False)
                        }
                    )
                    report.operations.append(operation)
                    self._add_operation_to_history(operation)
                    
                else:
                    self.logger.warning(
                        "Failed to sync player businesses",
                        wallet=wallet,
                        error=sync_result.get("error", "Unknown error")
                    )
                    
            except Exception as e:
                self.logger.error(
                    "Business sync error for player",
                    wallet=wallet,
                    session_id=session_id,
                    error=str(e)
                )
        
        return stats
    
    def _add_operation_to_history(self, operation: SyncOperation):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é."""
        self.operation_history.append(operation)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 24 —á–∞—Å–∞–º–∏
        cutoff_time = datetime.utcnow() - timedelta(hours=24)
        self.operation_history = [
            op for op in self.operation_history 
            if op.timestamp > cutoff_time
        ]
    
    def _cleanup_history(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏."""
        cutoff_time = datetime.utcnow() - timedelta(hours=24)
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
        self.operation_history = [
            op for op in self.operation_history 
            if op.timestamp > cutoff_time
        ]
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)
        self.session_history = self.session_history[-20:]
    
    async def get_sync_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        recent_operations = [
            asdict(op) for op in self.operation_history[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π
        ]
        
        last_session = self.session_history[-1] if self.session_history else None
        
        return {
            "is_running": self.is_running,
            "sync_interval_hours": self.sync_interval.total_seconds() / 3600,
            "last_sync": self.last_sync.isoformat() if self.last_sync else None,
            "next_sync_in_seconds": (
                (self.last_sync + self.sync_interval - datetime.utcnow()).total_seconds()
                if self.last_sync else 0
            ),
            "total_operations_24h": len(self.operation_history),
            "total_sessions": len(self.session_history),
            "last_session": asdict(last_session) if last_session else None,
            "recent_operations": recent_operations
        }
    
    async def get_detailed_sync_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã
        async with get_async_session() as db:
            player_result = await db.execute(
                select(Player.wallet).where(Player.is_active == True)
            )
            db_players = [row[0] for row in player_result.fetchall()]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º sync report —á–µ—Ä–µ–∑ validator
        validator = await get_pda_validator()
        sync_report = await validator.get_sync_report(db_players)
        
        return {
            "blockchain_sync_report": asdict(sync_report),
            "service_status": await self.get_sync_status(),
            "recent_sessions": [asdict(s) for s in self.session_history[-5:]],
            "cache_stats": validator.get_cache_stats()
        }


# Global service instance
_blockchain_sync_service: Optional[BlockchainSyncService] = None


async def get_blockchain_sync_service() -> BlockchainSyncService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ sync —Å–µ—Ä–≤–∏—Å–∞."""
    global _blockchain_sync_service
    if _blockchain_sync_service is None:
        _blockchain_sync_service = BlockchainSyncService()
    return _blockchain_sync_service


async def start_blockchain_sync():
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    service = await get_blockchain_sync_service()
    await service.start_periodic_sync()


async def stop_blockchain_sync():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    global _blockchain_sync_service
    if _blockchain_sync_service:
        await _blockchain_sync_service.stop_periodic_sync()


async def manual_sync() -> SyncSessionReport:
    """–ú–∞–Ω—É–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–¥–ª—è API endpoints)."""
    service = await get_blockchain_sync_service()
    return await service.perform_full_sync()