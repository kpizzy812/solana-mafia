#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Business Sync –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ 2FRZFt4Ko2jYzGS221sizYC1v2hcizn8AjtgHxiJTzMU
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∏–∑–Ω–µ—Å—ã –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –Ω–æ –Ω–µ—Ç –≤ –ë–î.
"""

import asyncio
import sys
import os

# Add project root to path  
sys.path.append('/Users/a1/Projects/solana-mafia/app/backend')

from app.services.player_business_sync import get_player_business_sync_service
from app.services.pda_validator import get_pda_validator
from app.core.config import settings

async def test_business_sync():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º business sync –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –∫–æ—à–µ–ª—å–∫–µ."""
    
    test_wallet = "2FRZFt4Ko2jYzGS221sizYC1v2hcizn8AjtgHxiJTzMU"
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BUSINESS SYNC")
    print("=" * 50)
    print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫: {test_wallet}")
    print(f"üîó RPC: {settings.solana_rpc_url}")
    print()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º PDA validator
    print("1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê PDA VALIDATOR")
    try:
        pda_validator = await get_pda_validator()
        validation_result = await pda_validator.validate_player_pda(test_wallet)
        
        print(f"   ‚úÖ PDA –≤–∞–ª–∏–¥–µ–Ω: {validation_result.is_valid}")
        print(f"   üìç PDA –∞–¥—Ä–µ—Å: {validation_result.pda}")
        if validation_result.data_size:
            print(f"   üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {validation_result.data_size} bytes")
        else:
            print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ PDA validation: {e}")
        return
    
    print()
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å blockchain
    print("2Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–†–¢–§–û–õ–ò–û –° BLOCKCHAIN")
    try:
        business_sync_service = await get_player_business_sync_service()
        portfolio = await business_sync_service.get_player_portfolio(test_wallet)
        
        if portfolio:
            print(f"   ‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            print(f"   üí∞ Total invested (on-chain): {portfolio.total_invested:,} lamports ({portfolio.total_invested / 1e9:.3f} SOL)")
            print(f"   üìä Calculated from businesses: {portfolio.calculated_total_invested:,} lamports ({portfolio.calculated_total_invested / 1e9:.3f} SOL)")
            print(f"   ‚ö†Ô∏è  –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {portfolio.total_invested - portfolio.calculated_total_invested:,} lamports")
            print(f"   üè¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–∑–Ω–µ—Å–æ–≤: {portfolio.business_count}")
            print(f"   üí∏ Total upgrade spent: {portfolio.total_upgrade_spent:,} lamports ({portfolio.total_upgrade_spent / 1e9:.3f} SOL)")
            print(f"   üé∞ Total slot spent: {portfolio.total_slot_spent:,} lamports ({portfolio.total_slot_spent / 1e9:.3f} SOL)")
            print(f"   üíé Pending earnings: {portfolio.pending_earnings:,} lamports ({portfolio.pending_earnings / 1e9:.6f} SOL)")
            
            print("\n   üè™ –î–ï–¢–ê–õ–ò –ë–ò–ó–ù–ï–°–û–í:")
            for i, biz in enumerate(portfolio.businesses, 1):
                print(f"      {i}. –°–ª–æ—Ç {biz.slot_index}: {biz.business_type_name}")
                print(f"         üí∞ –í–ª–æ–∂–µ–Ω–æ: {biz.total_invested_amount:,} lamports ({biz.total_invested_amount / 1e9:.3f} SOL)")
                print(f"         üìà –£—Ä–æ–≤–µ–Ω—å: {biz.upgrade_level}")
                print(f"         üìä –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {biz.daily_rate} bp ({biz.daily_rate/100:.1f}%)")
                print(f"         üè∑Ô∏è  –¢–∏–ø —Å–ª–æ—Ç–∞: {biz.slot_type}")
                print(f"         üîÑ –ê–∫—Ç–∏–≤–µ–Ω: {biz.is_active}")
                print()
        else:
            print("   ‚ùå –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤")
            return
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {e}")
        return
    
    print()
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    print("3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ë–î")
    try:
        # –≠—Ç–æ —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –≤ –ë–î –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        print("   ‚ÑπÔ∏è  –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –±–∏–∑–Ω–µ—Å—ã –≤ –ë–î...")
        print("   ‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –û–∂–∏–¥–∞–µ—Ç—Å—è —á—Ç–æ –≤ –ë–î –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞")
        print("   üìù –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
    
    print()
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (dry run –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î)
    print("4Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    try:
        print("   üìù –°–∏–º—É–ª–∏—Ä—É–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –±—ã –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
        print("   ‚ûï –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–∏–∑–Ω–µ—Å–æ–≤:", portfolio.business_count)
        print("   üìä –ë—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
        print("   ‚ö†Ô∏è  –ë—É–¥–µ—Ç –≤—ã—è–≤–ª–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è total_invested vs calculated")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∞–Ω–æ–º–∞–ª–∏—é
        if portfolio.total_invested != portfolio.calculated_total_invested:
            discrepancy = portfolio.total_invested - portfolio.calculated_total_invested
            print(f"   üö® –ê–ù–û–ú–ê–õ–ò–Ø: {discrepancy:,} lamports —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è")
            print("   üí° –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
    
    print()
    print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("‚úÖ Business sync —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —É—Å–ø–µ—à–Ω–æ —á–∏—Ç–∞–µ—Ç—Å—è —Å blockchain") 
    print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–∞–≥–∏")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å existing signature parsing")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Business Sync...")
    asyncio.run(test_business_sync())