"""add_quest_system_tables

Revision ID: 9e5d9d7b8d67
Revises: 48bbb80a0d28
Create Date: 2025-08-12 14:32:04.706591

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '9e5d9d7b8d67'
down_revision: Union[str, None] = '48bbb80a0d28'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('quest_categories',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name_en', sa.String(length=100), nullable=False, comment='Category name in English'),
    sa.Column('name_ru', sa.String(length=100), nullable=False, comment='Category name in Russian'),
    sa.Column('description_en', sa.Text(), nullable=True, comment='Category description in English'),
    sa.Column('description_ru', sa.Text(), nullable=True, comment='Category description in Russian'),
    sa.Column('icon', sa.String(length=50), nullable=True, comment='Icon identifier for UI'),
    sa.Column('color', sa.String(length=20), nullable=True, comment='Color theme for this category'),
    sa.Column('order_priority', sa.Integer(), nullable=False, comment='Order priority for displaying categories'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether this category is active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_quest_categories_created_at'), 'quest_categories', ['created_at'], unique=False)
    op.create_index(op.f('ix_quest_categories_updated_at'), 'quest_categories', ['updated_at'], unique=False)
    op.create_table('quest_templates',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Template name'),
    sa.Column('quest_type', sa.String(length=30), nullable=False, comment='Type of quest this template creates'),
    sa.Column('template_data', sa.JSON(), nullable=False, comment='Template configuration data'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether template is active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_quest_templates_created_at'), 'quest_templates', ['created_at'], unique=False)
    op.create_index(op.f('ix_quest_templates_updated_at'), 'quest_templates', ['updated_at'], unique=False)
    op.create_table('quests',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=True, comment='Quest category ID'),
    sa.Column('quest_type', sa.String(length=30), nullable=False, comment='Type of quest'),
    sa.Column('difficulty', sa.String(length=20), nullable=False, comment='Quest difficulty level'),
    sa.Column('title_en', sa.String(length=200), nullable=False, comment='Quest title in English'),
    sa.Column('title_ru', sa.String(length=200), nullable=False, comment='Quest title in Russian'),
    sa.Column('description_en', sa.Text(), nullable=False, comment='Quest description in English'),
    sa.Column('description_ru', sa.Text(), nullable=False, comment='Quest description in Russian'),
    sa.Column('target_value', sa.Integer(), nullable=False, comment='Target value to complete quest (e.g., number of referrals)'),
    sa.Column('current_target', sa.Integer(), nullable=True, comment='Current target for progressive quests'),
    sa.Column('max_target', sa.Integer(), nullable=True, comment='Maximum target for progressive quests'),
    sa.Column('prestige_reward', sa.Integer(), nullable=False, comment='Prestige points awarded upon completion'),
    sa.Column('bonus_reward', sa.Integer(), nullable=True, comment='Additional bonus reward (SOL in lamports)'),
    sa.Column('is_repeatable', sa.Boolean(), nullable=False, comment='Whether quest can be repeated'),
    sa.Column('is_progressive', sa.Boolean(), nullable=False, comment='Whether quest progresses (like referral goals)'),
    sa.Column('is_daily', sa.Boolean(), nullable=False, comment='Whether quest resets daily'),
    sa.Column('cooldown_hours', sa.Integer(), nullable=True, comment='Cooldown between completions (for repeatable quests)'),
    sa.Column('expires_at', sa.DateTime(), nullable=True, comment='Quest expiration time'),
    sa.Column('min_level', sa.Integer(), nullable=False, comment='Minimum player level required'),
    sa.Column('required_quests', sa.JSON(), nullable=True, comment='List of quest IDs that must be completed first'),
    sa.Column('quest_metadata', sa.JSON(), nullable=True, comment='Additional quest-specific metadata'),
    sa.Column('social_links', sa.JSON(), nullable=True, comment='Social media links for verification'),
    sa.Column('order_priority', sa.Integer(), nullable=False, comment='Order priority for displaying quests'),
    sa.Column('is_featured', sa.Boolean(), nullable=False, comment='Whether quest is featured'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether quest is active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['quest_categories.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_quest_active', 'quests', ['is_active', 'order_priority'], unique=False)
    op.create_index('idx_quest_category', 'quests', ['category_id', 'is_active'], unique=False)
    op.create_index('idx_quest_difficulty', 'quests', ['difficulty'], unique=False)
    op.create_index('idx_quest_featured', 'quests', ['is_featured', 'order_priority'], unique=False)
    op.create_index('idx_quest_type', 'quests', ['quest_type'], unique=False)
    op.create_index(op.f('ix_quests_created_at'), 'quests', ['created_at'], unique=False)
    op.create_index(op.f('ix_quests_updated_at'), 'quests', ['updated_at'], unique=False)
    op.create_table('player_quest_progress',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('player_wallet', sa.String(length=44), nullable=False, comment='Player wallet address'),
    sa.Column('quest_id', sa.Integer(), nullable=False, comment='Quest ID'),
    sa.Column('current_progress', sa.Integer(), nullable=False, comment='Current progress value'),
    sa.Column('target_value', sa.Integer(), nullable=False, comment='Target value when quest was started'),
    sa.Column('is_completed', sa.Boolean(), nullable=False, comment='Whether quest is completed'),
    sa.Column('is_claimed', sa.Boolean(), nullable=False, comment='Whether reward has been claimed'),
    sa.Column('started_at', sa.DateTime(), nullable=False, comment='When quest was started'),
    sa.Column('completed_at', sa.DateTime(), nullable=True, comment='When quest was completed'),
    sa.Column('claimed_at', sa.DateTime(), nullable=True, comment='When reward was claimed'),
    sa.Column('last_progress_update', sa.DateTime(), nullable=True, comment='Last time progress was updated'),
    sa.Column('prestige_points_rewarded', sa.Integer(), nullable=False, comment='Prestige points actually rewarded'),
    sa.Column('bonus_reward_given', sa.Integer(), nullable=True, comment='Bonus reward actually given'),
    sa.Column('progress_metadata', sa.JSON(), nullable=True, comment='Additional progress-specific metadata'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['player_wallet'], ['players.wallet'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['quest_id'], ['quests.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('player_wallet', 'quest_id', name='uq_player_quest')
    )
    op.create_index('idx_player_quest_progress_player', 'player_quest_progress', ['player_wallet'], unique=False)
    op.create_index('idx_player_quest_progress_quest', 'player_quest_progress', ['quest_id'], unique=False)
    op.create_index('idx_player_quest_progress_status', 'player_quest_progress', ['is_completed', 'is_claimed'], unique=False)
    op.create_index('idx_player_quest_progress_timing', 'player_quest_progress', ['completed_at', 'claimed_at'], unique=False)
    op.create_index(op.f('ix_player_quest_progress_created_at'), 'player_quest_progress', ['created_at'], unique=False)
    op.create_index(op.f('ix_player_quest_progress_updated_at'), 'player_quest_progress', ['updated_at'], unique=False)
    op.create_table('quest_rewards',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('quest_id', sa.Integer(), nullable=False, comment='Quest ID'),
    sa.Column('reward_type', sa.String(length=50), nullable=False, comment='Type of reward (prestige, sol, nft, etc.)'),
    sa.Column('reward_value', sa.Integer(), nullable=False, comment='Reward value'),
    sa.Column('reward_data', sa.JSON(), nullable=True, comment='Additional reward data'),
    sa.Column('condition_type', sa.String(length=50), nullable=True, comment='Condition type for this reward'),
    sa.Column('condition_value', sa.Text(), nullable=True, comment='Condition value'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether reward is active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['quest_id'], ['quests.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_quest_rewards_created_at'), 'quest_rewards', ['created_at'], unique=False)
    op.create_index(op.f('ix_quest_rewards_updated_at'), 'quest_rewards', ['updated_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_quest_rewards_updated_at'), table_name='quest_rewards')
    op.drop_index(op.f('ix_quest_rewards_created_at'), table_name='quest_rewards')
    op.drop_table('quest_rewards')
    op.drop_index(op.f('ix_player_quest_progress_updated_at'), table_name='player_quest_progress')
    op.drop_index(op.f('ix_player_quest_progress_created_at'), table_name='player_quest_progress')
    op.drop_index('idx_player_quest_progress_timing', table_name='player_quest_progress')
    op.drop_index('idx_player_quest_progress_status', table_name='player_quest_progress')
    op.drop_index('idx_player_quest_progress_quest', table_name='player_quest_progress')
    op.drop_index('idx_player_quest_progress_player', table_name='player_quest_progress')
    op.drop_table('player_quest_progress')
    op.drop_index(op.f('ix_quests_updated_at'), table_name='quests')
    op.drop_index(op.f('ix_quests_created_at'), table_name='quests')
    op.drop_index('idx_quest_type', table_name='quests')
    op.drop_index('idx_quest_featured', table_name='quests')
    op.drop_index('idx_quest_difficulty', table_name='quests')
    op.drop_index('idx_quest_category', table_name='quests')
    op.drop_index('idx_quest_active', table_name='quests')
    op.drop_table('quests')
    op.drop_index(op.f('ix_quest_templates_updated_at'), table_name='quest_templates')
    op.drop_index(op.f('ix_quest_templates_created_at'), table_name='quest_templates')
    op.drop_table('quest_templates')
    op.drop_index(op.f('ix_quest_categories_updated_at'), table_name='quest_categories')
    op.drop_index(op.f('ix_quest_categories_created_at'), table_name='quest_categories')
    op.drop_table('quest_categories')
    # ### end Alembic commands ###