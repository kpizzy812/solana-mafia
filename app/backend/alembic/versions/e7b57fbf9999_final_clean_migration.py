"""final_clean_migration

Revision ID: e7b57fbf9999
Revises: 
Create Date: 2025-08-06 22:04:41.626498

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e7b57fbf9999'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('events',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('event_type', sa.Enum('PLAYER_CREATED', 'BUSINESS_CREATED', 'BUSINESS_UPGRADED', 'BUSINESS_SOLD', 'EARNINGS_UPDATED', 'EARNINGS_CLAIMED', 'BUSINESS_NFT_MINTED', 'BUSINESS_NFT_BURNED', 'BUSINESS_NFT_UPGRADED', 'BUSINESS_TRANSFERRED', 'BUSINESS_DEACTIVATED', 'SLOT_UNLOCKED', 'PREMIUM_SLOT_PURCHASED', 'BUSINESS_CREATED_IN_SLOT', 'BUSINESS_UPGRADED_IN_SLOT', 'BUSINESS_SOLD_FROM_SLOT', 'REFERRAL_BONUS_ADDED', name='eventtype'), nullable=False, comment='Type of event'),
    sa.Column('transaction_signature', sa.String(length=88), nullable=False, comment='Transaction signature'),
    sa.Column('instruction_index', sa.Integer(), nullable=False, comment='Instruction index within transaction'),
    sa.Column('event_index', sa.Integer(), nullable=False, comment='Event index within instruction'),
    sa.Column('slot', sa.BigInteger(), nullable=False, comment='Blockchain slot number'),
    sa.Column('block_time', sa.DateTime(), nullable=False, comment='Block timestamp'),
    sa.Column('raw_data', sa.JSON(), nullable=False, comment='Raw event data from blockchain'),
    sa.Column('parsed_data', sa.JSON(), nullable=True, comment='Parsed and structured event data'),
    sa.Column('player_wallet', sa.String(length=44), nullable=True, comment='Related player wallet'),
    sa.Column('business_mint', sa.String(length=44), nullable=True, comment='Related business NFT mint'),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSING', 'PROCESSED', 'FAILED', 'SKIPPED', name='eventstatus'), nullable=False, comment='Processing status'),
    sa.Column('processed_at', sa.DateTime(), nullable=True, comment='When event was processed'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if processing failed'),
    sa.Column('retry_count', sa.Integer(), nullable=False, comment='Number of processing retries'),
    sa.Column('indexer_version', sa.String(length=20), nullable=False, comment='Version of indexer that processed this event'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_event_block_time', 'events', ['block_time'], unique=False)
    op.create_index('idx_event_business_mint', 'events', ['business_mint'], unique=False)
    op.create_index('idx_event_pending_retry', 'events', ['status', 'retry_count'], unique=False)
    op.create_index('idx_event_player_type', 'events', ['player_wallet', 'event_type'], unique=False)
    op.create_index('idx_event_signature_unique', 'events', ['transaction_signature', 'instruction_index', 'event_index'], unique=True)
    op.create_index('idx_event_status_created', 'events', ['status', 'created_at'], unique=False)
    op.create_index('idx_event_type_slot', 'events', ['event_type', 'slot'], unique=False)
    op.create_index(op.f('ix_events_created_at'), 'events', ['created_at'], unique=False)
    op.create_index(op.f('ix_events_updated_at'), 'events', ['updated_at'], unique=False)
    op.create_table('players',
    sa.Column('wallet', sa.String(length=44), nullable=False, comment="Player's wallet public key"),
    sa.Column('total_invested', sa.BigInteger(), nullable=False, comment='Total amount invested in lamports'),
    sa.Column('total_upgrade_spent', sa.BigInteger(), nullable=False, comment='Total spent on upgrades in lamports'),
    sa.Column('total_slot_spent', sa.BigInteger(), nullable=False, comment='Total spent on slots in lamports'),
    sa.Column('total_earned', sa.BigInteger(), nullable=False, comment='Total earnings claimed in lamports'),
    sa.Column('pending_earnings', sa.BigInteger(), nullable=False, comment='Pending earnings in lamports'),
    sa.Column('pending_referral_earnings', sa.BigInteger(), nullable=False, comment='Pending referral earnings in lamports'),
    sa.Column('unlocked_slots_count', sa.Integer(), nullable=False, comment='Number of unlocked regular slots'),
    sa.Column('premium_slots_count', sa.Integer(), nullable=False, comment='Number of premium slots owned'),
    sa.Column('has_paid_entry', sa.Boolean(), nullable=False, comment='Whether player has paid entry fee'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether player account is active'),
    sa.Column('first_business_time', sa.DateTime(), nullable=True, comment='When player created their first business'),
    sa.Column('next_earnings_time', sa.DateTime(), nullable=True, comment='Next scheduled earnings update'),
    sa.Column('last_earnings_update', sa.DateTime(), nullable=True, comment='Last earnings update timestamp'),
    sa.Column('earnings_interval', sa.Integer(), nullable=False, comment='Earnings update interval in seconds'),
    sa.Column('referrer_wallet', sa.String(length=44), nullable=True, comment='Wallet of referring player'),
    sa.Column('referral_count', sa.Integer(), nullable=False, comment='Number of players referred'),
    sa.Column('transaction_signature', sa.String(length=88), nullable=True, comment='Transaction signature when player was created'),
    sa.Column('on_chain_created_at', sa.DateTime(), nullable=True, comment='Creation timestamp from on-chain data'),
    sa.Column('last_sync_at', sa.DateTime(), nullable=True, comment='Last synchronization with on-chain data'),
    sa.Column('sync_version', sa.Integer(), nullable=False, comment='Version for sync conflict resolution'),
    sa.Column('roi_percentage', sa.DECIMAL(precision=10, scale=4), nullable=True, comment='Return on investment percentage'),
    sa.Column('daily_earnings_estimate', sa.BigInteger(), nullable=False, comment='Estimated daily earnings in lamports'),
    sa.Column('prestige_points', sa.Integer(), nullable=False, comment='Current prestige points'),
    sa.Column('prestige_level', sa.String(length=20), nullable=False, comment='Current prestige level (wannabe, associate, soldier, capo, underboss, boss)'),
    sa.Column('total_prestige_earned', sa.Integer(), nullable=False, comment='Total prestige points earned throughout gameplay'),
    sa.Column('prestige_level_up_count', sa.Integer(), nullable=False, comment='Number of times player leveled up in prestige'),
    sa.Column('last_prestige_update', sa.DateTime(), nullable=True, comment='Last time prestige was updated'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('wallet')
    )
    op.create_index('idx_player_active_earnings', 'players', ['is_active', 'next_earnings_time'], unique=False)
    op.create_index('idx_player_created_at', 'players', ['created_at'], unique=False)
    op.create_index('idx_player_next_earnings', 'players', ['next_earnings_time'], unique=False)
    op.create_index('idx_player_prestige_level_main', 'players', ['prestige_level'], unique=False)
    op.create_index('idx_player_prestige_points', 'players', ['prestige_points'], unique=False)
    op.create_index('idx_player_referrer', 'players', ['referrer_wallet'], unique=False)
    op.create_index('idx_player_sync', 'players', ['last_sync_at'], unique=False)
    op.create_index(op.f('ix_players_created_at'), 'players', ['created_at'], unique=False)
    op.create_index(op.f('ix_players_updated_at'), 'players', ['updated_at'], unique=False)
    op.create_table('prestige_actions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('action_type', sa.String(length=30), nullable=False, comment='Type of action that awards points'),
    sa.Column('name_en', sa.String(length=100), nullable=False, comment='Action name in English'),
    sa.Column('name_ru', sa.String(length=100), nullable=False, comment='Action name in Russian'),
    sa.Column('description_en', sa.Text(), nullable=False, comment='Action description in English'),
    sa.Column('description_ru', sa.Text(), nullable=False, comment='Action description in Russian'),
    sa.Column('base_points', sa.Integer(), nullable=False, comment='Base points awarded (if not percentage-based)'),
    sa.Column('percentage_of_value', sa.DECIMAL(precision=8, scale=4), nullable=True, comment='Percentage of action value as points (e.g., 1.0000 = 1%)'),
    sa.Column('calculation_method', sa.String(length=20), nullable=False, comment="Calculation method: 'fixed', 'percentage', 'formula'"),
    sa.Column('calculation_formula', sa.Text(), nullable=True, comment='Custom calculation formula (for complex cases)'),
    sa.Column('min_points', sa.Integer(), nullable=False, comment='Minimum points that can be awarded'),
    sa.Column('max_points', sa.Integer(), nullable=True, comment='Maximum points that can be awarded (null = unlimited)'),
    sa.Column('max_per_day', sa.Integer(), nullable=True, comment='Maximum times this action can award points per day'),
    sa.Column('cooldown_seconds', sa.Integer(), nullable=True, comment='Cooldown between point awards for this action'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether this action is active'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version of this action configuration'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('action_type')
    )
    op.create_index('idx_prestige_action_active', 'prestige_actions', ['is_active'], unique=False)
    op.create_index('idx_prestige_action_type', 'prestige_actions', ['action_type'], unique=False)
    op.create_index(op.f('ix_prestige_actions_created_at'), 'prestige_actions', ['created_at'], unique=False)
    op.create_index(op.f('ix_prestige_actions_updated_at'), 'prestige_actions', ['updated_at'], unique=False)
    op.create_table('prestige_config',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('is_enabled', sa.Boolean(), nullable=False, comment='Whether prestige system is enabled'),
    sa.Column('sol_to_points_multiplier', sa.Integer(), nullable=False, comment='Multiplier for converting SOL to points (100 = 1 SOL = 100 pts)'),
    sa.Column('daily_activity_bonus', sa.Integer(), nullable=False, comment='Daily activity bonus points'),
    sa.Column('referral_points_percentage', sa.DECIMAL(precision=5, scale=4), nullable=False, comment="Percentage of referee's points awarded to referrer"),
    sa.Column('level_up_bonus', sa.Integer(), nullable=False, comment='Bonus points for leveling up'),
    sa.Column('min_action_value', sa.BigInteger(), nullable=False, comment='Minimum action value to award points'),
    sa.Column('max_points_per_day', sa.Integer(), nullable=True, comment='Maximum points that can be earned per day (null = unlimited)'),
    sa.Column('active_from', sa.DateTime(), nullable=False, comment='When this config becomes active'),
    sa.Column('active_until', sa.DateTime(), nullable=True, comment='When this config expires (null = indefinite)'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Configuration version'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_prestige_config_created_at'), 'prestige_config', ['created_at'], unique=False)
    op.create_index(op.f('ix_prestige_config_updated_at'), 'prestige_config', ['updated_at'], unique=False)
    op.create_table('prestige_levels',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('rank', sa.String(length=20), nullable=False, comment='Prestige rank name'),
    sa.Column('display_name_en', sa.String(length=50), nullable=False, comment='Display name in English'),
    sa.Column('display_name_ru', sa.String(length=50), nullable=False, comment='Display name in Russian'),
    sa.Column('description_en', sa.Text(), nullable=False, comment='Level description in English'),
    sa.Column('description_ru', sa.Text(), nullable=False, comment='Level description in Russian'),
    sa.Column('min_points', sa.Integer(), nullable=False, comment='Minimum prestige points required for this level'),
    sa.Column('max_points', sa.Integer(), nullable=True, comment='Maximum points for this level (null = unlimited)'),
    sa.Column('order_rank', sa.Integer(), nullable=False, comment='Numeric order for sorting levels'),
    sa.Column('bonus_multiplier', sa.DECIMAL(precision=5, scale=4), nullable=False, comment='Bonus multiplier for prestige point earning (1.0 = no bonus)'),
    sa.Column('referral_bonus', sa.DECIMAL(precision=5, scale=4), nullable=False, comment='Additional referral bonus percentage'),
    sa.Column('icon', sa.String(length=50), nullable=True, comment='Icon identifier for UI'),
    sa.Column('color', sa.String(length=20), nullable=True, comment='Color theme for this level'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether this level is active'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('order_rank'),
    sa.UniqueConstraint('rank')
    )
    op.create_index('idx_prestige_level_active', 'prestige_levels', ['is_active', 'order_rank'], unique=False)
    op.create_index('idx_prestige_level_order', 'prestige_levels', ['order_rank'], unique=False)
    op.create_index('idx_prestige_level_points', 'prestige_levels', ['min_points', 'max_points'], unique=False)
    op.create_index(op.f('ix_prestige_levels_created_at'), 'prestige_levels', ['created_at'], unique=False)
    op.create_index(op.f('ix_prestige_levels_updated_at'), 'prestige_levels', ['updated_at'], unique=False)
    op.create_table('referral_codes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('code', sa.String(length=20), nullable=False, comment='Unique referral code'),
    sa.Column('owner_id', sa.String(length=50), nullable=False, comment='Owner identifier (wallet address or tg_user_id)'),
    sa.Column('owner_type', sa.String(length=20), nullable=False, comment="Type of owner: 'wallet' or 'telegram'"),
    sa.Column('usage_count', sa.Integer(), nullable=False, comment='Number of times this code was used'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the code is active'),
    sa.Column('expires_at', sa.DateTime(), nullable=True, comment='Code expiration date (optional)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_referral_code_active', 'referral_codes', ['is_active', 'expires_at'], unique=False)
    op.create_index('idx_referral_code_owner', 'referral_codes', ['owner_id', 'owner_type'], unique=False)
    op.create_index(op.f('ix_referral_codes_code'), 'referral_codes', ['code'], unique=True)
    op.create_index(op.f('ix_referral_codes_created_at'), 'referral_codes', ['created_at'], unique=False)
    op.create_index(op.f('ix_referral_codes_updated_at'), 'referral_codes', ['updated_at'], unique=False)
    op.create_table('referral_config',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('level_1_rate', sa.DECIMAL(precision=5, scale=4), nullable=False, comment='Commission rate for level 1 referrals'),
    sa.Column('level_2_rate', sa.DECIMAL(precision=5, scale=4), nullable=False, comment='Commission rate for level 2 referrals'),
    sa.Column('level_3_rate', sa.DECIMAL(precision=5, scale=4), nullable=False, comment='Commission rate for level 3 referrals'),
    sa.Column('is_enabled', sa.Boolean(), nullable=False, comment='Whether referral system is enabled'),
    sa.Column('min_earning_threshold', sa.BigInteger(), nullable=False, comment='Minimum earning amount to trigger referral commission'),
    sa.Column('max_referral_levels', sa.Integer(), nullable=False, comment='Maximum referral levels'),
    sa.Column('active_from', sa.DateTime(), nullable=False, comment='When this config becomes active'),
    sa.Column('active_until', sa.DateTime(), nullable=True, comment='When this config expires (null = indefinite)'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Configuration version'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_referral_config_created_at'), 'referral_config', ['created_at'], unique=False)
    op.create_index(op.f('ix_referral_config_updated_at'), 'referral_config', ['updated_at'], unique=False)
    op.create_table('referral_stats',
    sa.Column('user_id', sa.String(length=50), nullable=False, comment='User identifier'),
    sa.Column('user_type', sa.String(length=20), nullable=False, comment="Type of user: 'wallet' or 'telegram'"),
    sa.Column('level_1_referrals', sa.Integer(), nullable=False, comment='Direct referrals count'),
    sa.Column('level_2_referrals', sa.Integer(), nullable=False, comment='Second-level referrals count'),
    sa.Column('level_3_referrals', sa.Integer(), nullable=False, comment='Third-level referrals count'),
    sa.Column('level_1_earnings', sa.BigInteger(), nullable=False, comment='Total earnings from level 1 referrals'),
    sa.Column('level_2_earnings', sa.BigInteger(), nullable=False, comment='Total earnings from level 2 referrals'),
    sa.Column('level_3_earnings', sa.BigInteger(), nullable=False, comment='Total earnings from level 3 referrals'),
    sa.Column('total_referrals', sa.Integer(), nullable=False, comment='Total referrals across all levels'),
    sa.Column('total_referral_earnings', sa.BigInteger(), nullable=False, comment='Total referral earnings across all levels'),
    sa.Column('pending_commission', sa.BigInteger(), nullable=False, comment='Pending commission to be paid'),
    sa.Column('last_updated_at', sa.DateTime(), nullable=False, comment='Last time stats were updated'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index('idx_referral_stats_earnings', 'referral_stats', ['total_referral_earnings'], unique=False)
    op.create_index('idx_referral_stats_total', 'referral_stats', ['total_referrals'], unique=False)
    op.create_index('idx_referral_stats_user', 'referral_stats', ['user_id', 'user_type'], unique=False)
    op.create_index(op.f('ix_referral_stats_created_at'), 'referral_stats', ['created_at'], unique=False)
    op.create_index(op.f('ix_referral_stats_updated_at'), 'referral_stats', ['updated_at'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.String(length=50), nullable=False, comment='Unique user identifier (wallet address or tg_{telegram_user_id})'),
    sa.Column('user_type', sa.String(length=20), nullable=False, comment="User type: 'wallet' or 'telegram'"),
    sa.Column('wallet_address', sa.String(length=44), nullable=True, comment='Solana wallet address'),
    sa.Column('telegram_user_id', sa.BigInteger(), nullable=True, comment='Telegram user ID'),
    sa.Column('telegram_username', sa.String(length=32), nullable=True, comment='Telegram username'),
    sa.Column('first_name', sa.String(length=64), nullable=True, comment="User's first name"),
    sa.Column('last_name', sa.String(length=64), nullable=True, comment="User's last name"),
    sa.Column('language_code', sa.String(length=10), nullable=True, comment="User's language code"),
    sa.Column('is_telegram_premium', sa.Boolean(), nullable=True, comment='Whether user has Telegram Premium'),
    sa.Column('telegram_photo_url', sa.Text(), nullable=True, comment='Telegram profile photo URL'),
    sa.Column('is_linked', sa.Boolean(), nullable=False, comment='Whether Telegram account is linked to a wallet'),
    sa.Column('linked_at', sa.DateTime(), nullable=True, comment='When accounts were linked'),
    sa.Column('total_invested', sa.BigInteger(), nullable=False, comment='Total amount invested in lamports'),
    sa.Column('total_upgrade_spent', sa.BigInteger(), nullable=False, comment='Total spent on upgrades in lamports'),
    sa.Column('total_slot_spent', sa.BigInteger(), nullable=False, comment='Total spent on slots in lamports'),
    sa.Column('total_earned', sa.BigInteger(), nullable=False, comment='Total earnings claimed in lamports'),
    sa.Column('pending_earnings', sa.BigInteger(), nullable=False, comment='Pending earnings in lamports'),
    sa.Column('pending_referral_earnings', sa.BigInteger(), nullable=False, comment='Pending referral earnings in lamports'),
    sa.Column('referrer_id', sa.String(length=50), nullable=True, comment="Referrer's user ID"),
    sa.Column('referral_code', sa.String(length=20), nullable=True, comment="User's unique referral code"),
    sa.Column('last_login_at', sa.DateTime(), nullable=True, comment='Last login timestamp'),
    sa.Column('last_activity_at', sa.DateTime(), nullable=True, comment='Last activity timestamp'),
    sa.Column('login_count', sa.Integer(), nullable=False, comment='Total login count'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether user account is active'),
    sa.Column('is_banned', sa.Boolean(), nullable=False, comment='Whether user is banned'),
    sa.Column('user_metadata', sa.JSON(), nullable=True, comment='Additional user metadata'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('referral_code'),
    sa.UniqueConstraint('telegram_user_id'),
    sa.UniqueConstraint('wallet_address')
    )
    op.create_index('idx_user_active', 'users', ['is_active'], unique=False)
    op.create_index('idx_user_last_activity', 'users', ['last_activity_at'], unique=False)
    op.create_index('idx_user_referrer', 'users', ['referrer_id'], unique=False)
    op.create_index('idx_user_telegram', 'users', ['telegram_user_id'], unique=False)
    op.create_index('idx_user_type', 'users', ['user_type'], unique=False)
    op.create_index('idx_user_wallet', 'users', ['wallet_address'], unique=False)
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_updated_at'), 'users', ['updated_at'], unique=False)
    op.create_table('businesses',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('owner_id', sa.String(length=50), nullable=False, comment="Owner's user ID"),
    sa.Column('player_wallet', sa.String(length=44), nullable=True, comment="Player's wallet address (for Player relationship)"),
    sa.Column('business_type', sa.Enum('TOBACCO_SHOP', 'FUNERAL_SERVICE', 'CAR_WORKSHOP', 'ITALIAN_RESTAURANT', 'GENTLEMEN_CLUB', 'CHARITY_FUND', name='businesstype'), nullable=False, comment='Type of business'),
    sa.Column('level', sa.Integer(), nullable=False, comment='Business upgrade level (0-3, matches contract upgrade_level)'),
    sa.Column('base_cost', sa.BigInteger(), nullable=False, comment='Base cost of business in lamports'),
    sa.Column('total_invested_amount', sa.BigInteger(), nullable=False, comment='Total invested including upgrades in lamports'),
    sa.Column('upgrade_costs', sa.Text(), nullable=True, comment='JSON array of upgrade costs'),
    sa.Column('daily_rate', sa.Integer(), nullable=False, comment='Daily rate in basis points (100 = 1%)'),
    sa.Column('last_claim_time', sa.DateTime(), nullable=True, comment='Last earnings claim timestamp'),
    sa.Column('total_earnings_generated', sa.BigInteger(), nullable=False, comment='Total earnings generated by this business'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether business is active and earning'),
    sa.Column('slot_index', sa.Integer(), nullable=True, comment='Index of slot this business occupies'),
    sa.Column('creation_signature', sa.String(length=88), nullable=True, comment='Transaction signature when business was created'),
    sa.Column('on_chain_created_at', sa.DateTime(), nullable=True, comment='Creation timestamp from blockchain'),
    sa.Column('last_sync_at', sa.DateTime(), nullable=True, comment='Last sync with on-chain data'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['player_wallet'], ['players.wallet'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_business_owner_active', 'businesses', ['owner_id', 'is_active'], unique=False)
    op.create_index('idx_business_player_active', 'businesses', ['player_wallet', 'is_active'], unique=False)
    op.create_index('idx_business_slot', 'businesses', ['owner_id', 'slot_index'], unique=False)
    op.create_index('idx_business_type_level', 'businesses', ['business_type', 'level'], unique=False)
    op.create_index(op.f('ix_businesses_created_at'), 'businesses', ['created_at'], unique=False)
    op.create_index(op.f('ix_businesses_updated_at'), 'businesses', ['updated_at'], unique=False)
    op.create_table('earnings_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('player_wallet', sa.String(length=44), nullable=False, comment='Player wallet address'),
    sa.Column('event_type', sa.String(length=20), nullable=False, comment='Type of earnings event (update, claim)'),
    sa.Column('amount', sa.BigInteger(), nullable=False, comment='Amount in lamports'),
    sa.Column('previous_balance', sa.BigInteger(), nullable=False, comment='Previous pending earnings balance'),
    sa.Column('new_balance', sa.BigInteger(), nullable=False, comment='New pending earnings balance'),
    sa.Column('base_earnings', sa.BigInteger(), nullable=False, comment='Base business earnings'),
    sa.Column('slot_bonus_earnings', sa.BigInteger(), nullable=False, comment='Bonus earnings from premium slots'),
    sa.Column('referral_earnings', sa.BigInteger(), nullable=False, comment='Referral bonus earnings'),
    sa.Column('business_count', sa.Integer(), nullable=False, comment='Number of active businesses at time of update'),
    sa.Column('transaction_signature', sa.String(length=88), nullable=True, comment='Related blockchain transaction'),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True, comment='Processing time in milliseconds'),
    sa.Column('indexer_version', sa.String(length=20), nullable=False, comment='Version of system that processed this'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['player_wallet'], ['players.wallet'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_earnings_history_amount', 'earnings_history', ['amount'], unique=False)
    op.create_index('idx_earnings_history_event_type', 'earnings_history', ['event_type', 'created_at'], unique=False)
    op.create_index('idx_earnings_history_player_time', 'earnings_history', ['player_wallet', 'created_at'], unique=False)
    op.create_index('idx_earnings_history_signature', 'earnings_history', ['transaction_signature'], unique=False)
    op.create_index(op.f('ix_earnings_history_created_at'), 'earnings_history', ['created_at'], unique=False)
    op.create_index(op.f('ix_earnings_history_updated_at'), 'earnings_history', ['updated_at'], unique=False)
    op.create_table('player_prestige_stats',
    sa.Column('player_wallet', sa.String(length=44), nullable=False, comment='Player wallet address'),
    sa.Column('current_points', sa.Integer(), nullable=False, comment='Current total prestige points'),
    sa.Column('current_level', sa.String(length=20), nullable=False, comment='Current prestige level'),
    sa.Column('total_points_earned', sa.Integer(), nullable=False, comment='Total points earned (including spent/lost)'),
    sa.Column('points_from_business', sa.Integer(), nullable=False, comment='Points earned from business actions'),
    sa.Column('points_from_referrals', sa.Integer(), nullable=False, comment='Points earned from referral system'),
    sa.Column('points_from_activity', sa.Integer(), nullable=False, comment='Points earned from daily activity'),
    sa.Column('highest_level_reached', sa.String(length=20), nullable=False, comment='Highest level ever reached'),
    sa.Column('level_up_count', sa.Integer(), nullable=False, comment='Number of times player leveled up'),
    sa.Column('last_level_up_at', sa.DateTime(), nullable=True, comment='When player last leveled up'),
    sa.Column('last_points_awarded_at', sa.DateTime(), nullable=True, comment='When points were last awarded'),
    sa.Column('daily_points_today', sa.Integer(), nullable=False, comment='Points earned today (resets daily)'),
    sa.Column('last_daily_reset', sa.DateTime(), nullable=True, comment='Last time daily counters were reset'),
    sa.Column('points_to_next_level', sa.Integer(), nullable=True, comment='Points needed to reach next level'),
    sa.Column('progress_percentage', sa.DECIMAL(precision=5, scale=2), nullable=False, comment='Progress to next level as percentage'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['player_wallet'], ['players.wallet'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('player_wallet')
    )
    op.create_index('idx_player_prestige_daily', 'player_prestige_stats', ['last_daily_reset', 'daily_points_today'], unique=False)
    op.create_index('idx_player_prestige_stats_level', 'player_prestige_stats', ['current_level'], unique=False)
    op.create_index('idx_player_prestige_stats_points', 'player_prestige_stats', ['current_points'], unique=False)
    op.create_index(op.f('ix_player_prestige_stats_created_at'), 'player_prestige_stats', ['created_at'], unique=False)
    op.create_index(op.f('ix_player_prestige_stats_updated_at'), 'player_prestige_stats', ['updated_at'], unique=False)
    op.create_table('prestige_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('player_wallet', sa.String(length=44), nullable=False, comment='Player wallet address'),
    sa.Column('action_type', sa.String(length=30), nullable=False, comment='Type of action that awarded points'),
    sa.Column('points_awarded', sa.Integer(), nullable=False, comment='Number of prestige points awarded'),
    sa.Column('points_before', sa.Integer(), nullable=False, comment="Player's points before this action"),
    sa.Column('points_after', sa.Integer(), nullable=False, comment="Player's points after this action"),
    sa.Column('level_before', sa.String(length=20), nullable=True, comment="Player's prestige level before this action"),
    sa.Column('level_after', sa.String(length=20), nullable=True, comment="Player's prestige level after this action"),
    sa.Column('level_up', sa.Boolean(), nullable=False, comment='Whether this action resulted in a level up'),
    sa.Column('action_value', sa.BigInteger(), nullable=True, comment='Value associated with the action (e.g., business cost in lamports)'),
    sa.Column('business_type', sa.Integer(), nullable=True, comment='Business type if action involves business'),
    sa.Column('business_level', sa.Integer(), nullable=True, comment='Business level if action involves business'),
    sa.Column('slot_index', sa.Integer(), nullable=True, comment='Slot index if action involves slots'),
    sa.Column('related_transaction', sa.String(length=88), nullable=True, comment='Related blockchain transaction signature'),
    sa.Column('related_event_id', sa.Integer(), nullable=True, comment='Related event ID that triggered this prestige award'),
    sa.Column('action_metadata', sa.JSON(), nullable=True, comment='Additional metadata for the action'),
    sa.Column('calculation_method', sa.String(length=20), nullable=False, comment='Method used to calculate points'),
    sa.Column('multiplier_applied', sa.DECIMAL(precision=5, scale=4), nullable=False, comment='Multiplier applied during calculation'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['action_type'], ['prestige_actions.action_type'], ),
    sa.ForeignKeyConstraint(['player_wallet'], ['players.wallet'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_prestige_history_action_type', 'prestige_history', ['action_type', 'created_at'], unique=False)
    op.create_index('idx_prestige_history_event', 'prestige_history', ['related_event_id'], unique=False)
    op.create_index('idx_prestige_history_level_up', 'prestige_history', ['level_up', 'created_at'], unique=False)
    op.create_index('idx_prestige_history_player_time', 'prestige_history', ['player_wallet', 'created_at'], unique=False)
    op.create_index('idx_prestige_history_transaction', 'prestige_history', ['related_transaction'], unique=False)
    op.create_index(op.f('ix_prestige_history_created_at'), 'prestige_history', ['created_at'], unique=False)
    op.create_index(op.f('ix_prestige_history_updated_at'), 'prestige_history', ['updated_at'], unique=False)
    op.create_table('referral_relations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('referrer_id', sa.String(length=50), nullable=False, comment='Referrer identifier'),
    sa.Column('referrer_type', sa.String(length=20), nullable=False, comment="Type of referrer: 'wallet' or 'telegram'"),
    sa.Column('referee_id', sa.String(length=50), nullable=False, comment='Referee identifier'),
    sa.Column('referee_type', sa.String(length=20), nullable=False, comment="Type of referee: 'wallet' or 'telegram'"),
    sa.Column('referral_code_id', sa.Integer(), nullable=False, comment='Referral code that was used'),
    sa.Column('level', sa.Integer(), nullable=False, comment='Referral level (1=direct, 2=second-level, 3=third-level)'),
    sa.Column('commission_rate', sa.DECIMAL(precision=5, scale=4), nullable=False, comment='Commission rate at time of referral (e.g., 0.0500 for 5%)'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether this referral relation is active'),
    sa.Column('first_earning_at', sa.DateTime(), nullable=True, comment='When referee first earned (triggering commissions)'),
    sa.Column('total_earnings_referred', sa.BigInteger(), nullable=False, comment='Total earnings from referee that triggered commissions'),
    sa.Column('total_commission_earned', sa.BigInteger(), nullable=False, comment='Total commission earned from this referral'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['referral_code_id'], ['referral_codes.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('referrer_id', 'referee_id', name='unique_referral_relation')
    )
    op.create_index('idx_referral_active', 'referral_relations', ['is_active'], unique=False)
    op.create_index('idx_referral_level', 'referral_relations', ['level'], unique=False)
    op.create_index('idx_referral_referee', 'referral_relations', ['referee_id', 'referee_type'], unique=False)
    op.create_index('idx_referral_referrer', 'referral_relations', ['referrer_id', 'referrer_type'], unique=False)
    op.create_index(op.f('ix_referral_relations_created_at'), 'referral_relations', ['created_at'], unique=False)
    op.create_index(op.f('ix_referral_relations_updated_at'), 'referral_relations', ['updated_at'], unique=False)
    op.create_table('business_slots',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('owner_id', sa.String(length=50), nullable=False, comment="Owner's user ID"),
    sa.Column('player_wallet', sa.String(length=44), nullable=True, comment="Player's wallet address (for Player relationship)"),
    sa.Column('slot_index', sa.Integer(), nullable=False, comment='Slot index (0-based)'),
    sa.Column('slot_type', sa.Enum('BASIC', 'PREMIUM', 'VIP', 'LEGENDARY', name='slottype'), nullable=False, comment='Type of slot'),
    sa.Column('is_unlocked', sa.Boolean(), nullable=False, comment='Whether slot is unlocked'),
    sa.Column('unlock_cost_paid', sa.BigInteger(), nullable=False, comment='Cost paid to unlock this slot'),
    sa.Column('business_id', sa.Integer(), nullable=True, comment='Business currently in this slot'),
    sa.Column('yield_bonus', sa.Integer(), nullable=False, comment='Yield bonus in basis points'),
    sa.Column('sell_fee_discount', sa.Integer(), nullable=False, comment='Sell fee discount percentage'),
    sa.Column('unlock_signature', sa.String(length=88), nullable=True, comment='Transaction signature when slot was unlocked'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['business_id'], ['businesses.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['player_wallet'], ['players.wallet'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_slot_owner_index', 'business_slots', ['owner_id', 'slot_index'], unique=True)
    op.create_index('idx_slot_owner_unlocked', 'business_slots', ['owner_id', 'is_unlocked'], unique=False)
    op.create_index('idx_slot_type', 'business_slots', ['slot_type'], unique=False)
    op.create_index(op.f('ix_business_slots_created_at'), 'business_slots', ['created_at'], unique=False)
    op.create_index(op.f('ix_business_slots_updated_at'), 'business_slots', ['updated_at'], unique=False)
    op.create_table('referral_commissions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('referral_relation_id', sa.Integer(), nullable=False, comment='Referral relation that generated this commission'),
    sa.Column('earning_event_id', sa.String(length=100), nullable=True, comment='ID of the earning event that triggered this commission'),
    sa.Column('referee_earning_amount', sa.BigInteger(), nullable=False, comment='Amount the referee earned (that triggered commission)'),
    sa.Column('commission_amount', sa.BigInteger(), nullable=False, comment='Commission amount paid out'),
    sa.Column('commission_rate', sa.DECIMAL(precision=5, scale=4), nullable=False, comment='Commission rate used for this payment'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: pending, paid, failed'),
    sa.Column('transaction_signature', sa.String(length=88), nullable=True, comment='Solana transaction signature for commission payment'),
    sa.Column('paid_at', sa.DateTime(), nullable=True, comment='When commission was paid'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['referral_relation_id'], ['referral_relations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_commission_event', 'referral_commissions', ['earning_event_id'], unique=False)
    op.create_index('idx_commission_paid', 'referral_commissions', ['paid_at'], unique=False)
    op.create_index('idx_commission_relation', 'referral_commissions', ['referral_relation_id'], unique=False)
    op.create_index('idx_commission_status', 'referral_commissions', ['status'], unique=False)
    op.create_index(op.f('ix_referral_commissions_created_at'), 'referral_commissions', ['created_at'], unique=False)
    op.create_index(op.f('ix_referral_commissions_updated_at'), 'referral_commissions', ['updated_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_referral_commissions_updated_at'), table_name='referral_commissions')
    op.drop_index(op.f('ix_referral_commissions_created_at'), table_name='referral_commissions')
    op.drop_index('idx_commission_status', table_name='referral_commissions')
    op.drop_index('idx_commission_relation', table_name='referral_commissions')
    op.drop_index('idx_commission_paid', table_name='referral_commissions')
    op.drop_index('idx_commission_event', table_name='referral_commissions')
    op.drop_table('referral_commissions')
    op.drop_index(op.f('ix_business_slots_updated_at'), table_name='business_slots')
    op.drop_index(op.f('ix_business_slots_created_at'), table_name='business_slots')
    op.drop_index('idx_slot_type', table_name='business_slots')
    op.drop_index('idx_slot_owner_unlocked', table_name='business_slots')
    op.drop_index('idx_slot_owner_index', table_name='business_slots')
    op.drop_table('business_slots')
    op.drop_index(op.f('ix_referral_relations_updated_at'), table_name='referral_relations')
    op.drop_index(op.f('ix_referral_relations_created_at'), table_name='referral_relations')
    op.drop_index('idx_referral_referrer', table_name='referral_relations')
    op.drop_index('idx_referral_referee', table_name='referral_relations')
    op.drop_index('idx_referral_level', table_name='referral_relations')
    op.drop_index('idx_referral_active', table_name='referral_relations')
    op.drop_table('referral_relations')
    op.drop_index(op.f('ix_prestige_history_updated_at'), table_name='prestige_history')
    op.drop_index(op.f('ix_prestige_history_created_at'), table_name='prestige_history')
    op.drop_index('idx_prestige_history_transaction', table_name='prestige_history')
    op.drop_index('idx_prestige_history_player_time', table_name='prestige_history')
    op.drop_index('idx_prestige_history_level_up', table_name='prestige_history')
    op.drop_index('idx_prestige_history_event', table_name='prestige_history')
    op.drop_index('idx_prestige_history_action_type', table_name='prestige_history')
    op.drop_table('prestige_history')
    op.drop_index(op.f('ix_player_prestige_stats_updated_at'), table_name='player_prestige_stats')
    op.drop_index(op.f('ix_player_prestige_stats_created_at'), table_name='player_prestige_stats')
    op.drop_index('idx_player_prestige_stats_points', table_name='player_prestige_stats')
    op.drop_index('idx_player_prestige_stats_level', table_name='player_prestige_stats')
    op.drop_index('idx_player_prestige_daily', table_name='player_prestige_stats')
    op.drop_table('player_prestige_stats')
    op.drop_index(op.f('ix_earnings_history_updated_at'), table_name='earnings_history')
    op.drop_index(op.f('ix_earnings_history_created_at'), table_name='earnings_history')
    op.drop_index('idx_earnings_history_signature', table_name='earnings_history')
    op.drop_index('idx_earnings_history_player_time', table_name='earnings_history')
    op.drop_index('idx_earnings_history_event_type', table_name='earnings_history')
    op.drop_index('idx_earnings_history_amount', table_name='earnings_history')
    op.drop_table('earnings_history')
    op.drop_index(op.f('ix_businesses_updated_at'), table_name='businesses')
    op.drop_index(op.f('ix_businesses_created_at'), table_name='businesses')
    op.drop_index('idx_business_type_level', table_name='businesses')
    op.drop_index('idx_business_slot', table_name='businesses')
    op.drop_index('idx_business_player_active', table_name='businesses')
    op.drop_index('idx_business_owner_active', table_name='businesses')
    op.drop_table('businesses')
    op.drop_index(op.f('ix_users_updated_at'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_index('idx_user_wallet', table_name='users')
    op.drop_index('idx_user_type', table_name='users')
    op.drop_index('idx_user_telegram', table_name='users')
    op.drop_index('idx_user_referrer', table_name='users')
    op.drop_index('idx_user_last_activity', table_name='users')
    op.drop_index('idx_user_active', table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_referral_stats_updated_at'), table_name='referral_stats')
    op.drop_index(op.f('ix_referral_stats_created_at'), table_name='referral_stats')
    op.drop_index('idx_referral_stats_user', table_name='referral_stats')
    op.drop_index('idx_referral_stats_total', table_name='referral_stats')
    op.drop_index('idx_referral_stats_earnings', table_name='referral_stats')
    op.drop_table('referral_stats')
    op.drop_index(op.f('ix_referral_config_updated_at'), table_name='referral_config')
    op.drop_index(op.f('ix_referral_config_created_at'), table_name='referral_config')
    op.drop_table('referral_config')
    op.drop_index(op.f('ix_referral_codes_updated_at'), table_name='referral_codes')
    op.drop_index(op.f('ix_referral_codes_created_at'), table_name='referral_codes')
    op.drop_index(op.f('ix_referral_codes_code'), table_name='referral_codes')
    op.drop_index('idx_referral_code_owner', table_name='referral_codes')
    op.drop_index('idx_referral_code_active', table_name='referral_codes')
    op.drop_table('referral_codes')
    op.drop_index(op.f('ix_prestige_levels_updated_at'), table_name='prestige_levels')
    op.drop_index(op.f('ix_prestige_levels_created_at'), table_name='prestige_levels')
    op.drop_index('idx_prestige_level_points', table_name='prestige_levels')
    op.drop_index('idx_prestige_level_order', table_name='prestige_levels')
    op.drop_index('idx_prestige_level_active', table_name='prestige_levels')
    op.drop_table('prestige_levels')
    op.drop_index(op.f('ix_prestige_config_updated_at'), table_name='prestige_config')
    op.drop_index(op.f('ix_prestige_config_created_at'), table_name='prestige_config')
    op.drop_table('prestige_config')
    op.drop_index(op.f('ix_prestige_actions_updated_at'), table_name='prestige_actions')
    op.drop_index(op.f('ix_prestige_actions_created_at'), table_name='prestige_actions')
    op.drop_index('idx_prestige_action_type', table_name='prestige_actions')
    op.drop_index('idx_prestige_action_active', table_name='prestige_actions')
    op.drop_table('prestige_actions')
    op.drop_index(op.f('ix_players_updated_at'), table_name='players')
    op.drop_index(op.f('ix_players_created_at'), table_name='players')
    op.drop_index('idx_player_sync', table_name='players')
    op.drop_index('idx_player_referrer', table_name='players')
    op.drop_index('idx_player_prestige_points', table_name='players')
    op.drop_index('idx_player_prestige_level_main', table_name='players')
    op.drop_index('idx_player_next_earnings', table_name='players')
    op.drop_index('idx_player_created_at', table_name='players')
    op.drop_index('idx_player_active_earnings', table_name='players')
    op.drop_table('players')
    op.drop_index(op.f('ix_events_updated_at'), table_name='events')
    op.drop_index(op.f('ix_events_created_at'), table_name='events')
    op.drop_index('idx_event_type_slot', table_name='events')
    op.drop_index('idx_event_status_created', table_name='events')
    op.drop_index('idx_event_signature_unique', table_name='events')
    op.drop_index('idx_event_player_type', table_name='events')
    op.drop_index('idx_event_pending_retry', table_name='events')
    op.drop_index('idx_event_business_mint', table_name='events')
    op.drop_index('idx_event_block_time', table_name='events')
    op.drop_table('events')
    # ### end Alembic commands ###