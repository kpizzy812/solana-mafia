// state/player.rs
use anchor_lang::prelude::*;
use crate::constants::*;
use crate::error::SolanaMafiaError;
use super::business::Business;

#[account]
pub struct Player {
    pub owner: Pubkey,
    pub businesses: Vec<Business>,
    pub total_invested: u64,
    pub total_earned: u64,
    pub pending_earnings: u64,
    pub pending_referral_earnings: u64,
    pub has_paid_entry: bool,
    pub created_at: i64,
    pub bump: u8,
}

impl Player {
    /// üîí –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ä–∞–∑–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ - —Å –ë–û–õ–¨–®–ò–ú –∑–∞–ø–∞—Å–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    pub const SIZE: usize = 8 + // discriminator
        32 + // owner
        4 + (Business::SIZE * MAX_BUSINESSES_PER_PLAYER as usize) + // businesses Vec
        8 + // total_invested
        8 + // total_earned
        8 + // pending_earnings
        8 + // pending_referral_earnings
        1 + // has_paid_entry
        8 + // created_at
        1 + // bump
        1000; // üîí –ë–û–õ–¨–®–û–ô –ó–ê–ü–ê–° –¥–ª—è Anchor overhead –∏ –±—É–¥—É—â–∏—Ö –ø–æ–ª–µ–π

    /// Create new player
    pub fn new(owner: Pubkey, _referrer: Option<Pubkey>, current_time: i64, bump: u8) -> Self {
        Self {
            owner,
            businesses: Vec::new(),
            total_invested: 0,
            total_earned: 0,
            pending_earnings: 0,
            pending_referral_earnings: 0,
            has_paid_entry: false,
            created_at: current_time,
            bump,
        }
    }

    /// Get business by index
    pub fn get_business(&self, index: u8) -> Option<&Business> {
        self.businesses.get(index as usize)
    }

    /// Get mutable business by index
    pub fn get_business_mut(&mut self, index: u8) -> Option<&mut Business> {
        self.businesses.get_mut(index as usize)
    }

    /// üîí –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å
    pub fn can_create_business(&self) -> bool {
        self.businesses.len() < MAX_BUSINESSES_PER_PLAYER as usize
    }

    /// üîí –ë–ï–ó–û–ü–ê–°–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    pub fn add_business(&mut self, business: Business) -> Result<()> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if !self.can_create_business() {
            return Err(SolanaMafiaError::MaxBusinessesReached.into());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –±–∏–∑–Ω–µ—Å–∞
        let clock = Clock::get()?;
        business.health_check(clock.unix_timestamp)?;
        
        self.businesses.push(business);
        
        // üîí –ó–∞—â–∏—Ç–∞ –æ—Ç overflow
        self.total_invested = self.total_invested
            .checked_add(business.invested_amount)
            .ok_or(SolanaMafiaError::MathOverflow)?;
        
        Ok(())
    }

    /// üîí –ë–ï–ó–û–ü–ê–°–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ pending earnings —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    pub fn update_pending_earnings(&mut self, current_time: i64) -> Result<()> {
        let mut total_new_earnings = 0u64;
        
        for business in &mut self.businesses {
            if business.is_active {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                let pending = business.calculate_pending_earnings(current_time);
                
                // üîí –ó–∞—â–∏—Ç–∞ –æ—Ç overflow –ø—Ä–∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏
                total_new_earnings = total_new_earnings
                    .checked_add(pending)
                    .ok_or(SolanaMafiaError::MathOverflow)?;
                    
                // –û–±–Ω–æ–≤–ª—è–µ–º last_claim –±–µ–∑–æ–ø–∞—Å–Ω–æ
                business.update_last_claim(current_time)?;
            }
        }
        
        // üîí –ó–∞—â–∏—Ç–∞ –æ—Ç overflow –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫ pending_earnings
        self.pending_earnings = self.pending_earnings
            .checked_add(total_new_earnings)
            .ok_or(SolanaMafiaError::MathOverflow)?;
            
        // üîí –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –õ–∏–º–∏—Ç –Ω–∞ pending_earnings
        let max_pending = 1000_000_000_000; // 1000 SOL –º–∞–∫—Å–∏–º—É–º
        if self.pending_earnings > max_pending {
            msg!("‚ö†Ô∏è Pending earnings –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ {} SOL", max_pending / 1_000_000_000);
            self.pending_earnings = max_pending;
        }
        
        Ok(())
    }

    /// Get total claimable amount (earnings + referral)
    pub fn get_claimable_amount(&self) -> Result<u64> {
        self.pending_earnings
            .checked_add(self.pending_referral_earnings)
            .ok_or(SolanaMafiaError::MathOverflow.into())
    }

    /// üîí –ë–ï–ó–û–ü–ê–°–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö earnings
    pub fn claim_all_earnings(&mut self) -> Result<()> {
        let total_claimed = self.pending_earnings
            .checked_add(self.pending_referral_earnings)
            .ok_or(SolanaMafiaError::MathOverflow)?;
            
        // üîí –ó–∞—â–∏—Ç–∞ –æ—Ç overflow
        self.total_earned = self.total_earned
            .checked_add(total_claimed)
            .ok_or(SolanaMafiaError::MathOverflow)?;
            
        // üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å total_earned (–Ω–µ –±–æ–ª—å—à–µ 10x –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π)
        let max_reasonable_earned = self.total_invested
            .checked_mul(10)
            .unwrap_or(u64::MAX);
            
        if self.total_earned > max_reasonable_earned {
            msg!("‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ earnings: {} vs invested: {}", 
                 self.total_earned, self.total_invested);
                 
            // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        }
            
        self.pending_earnings = 0;
        self.pending_referral_earnings = 0;
        Ok(())
    }

    /// üîí –ë–ï–ó–û–ü–ê–°–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ (—Å –ª–∏–º–∏—Ç–∞–º–∏)
    pub fn add_referral_bonus(&mut self, amount: u64) -> Result<()> {
        // üîí –õ–∏–º–∏—Ç –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ earnings (–º–∞–∫—Å–∏–º—É–º 50% –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π)
        let max_referral_total = self.total_invested
            .checked_div(2)
            .unwrap_or(0);
            
        let new_referral_total = self.pending_referral_earnings
            .checked_add(amount)
            .ok_or(SolanaMafiaError::MathOverflow)?;
            
        if new_referral_total > max_referral_total {
            msg!("‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω: {} > {}", new_referral_total, max_referral_total);
            return Err(SolanaMafiaError::InvalidReferrer.into());
        }
        
        self.pending_referral_earnings = new_referral_total;
        Ok(())
    }

    /// Claim specific amount of earnings
    pub fn claim_earnings(&mut self, amount: u64) -> Result<()> {
        self.pending_earnings = self.pending_earnings.saturating_sub(amount);
        
        // üîí –ó–∞—â–∏—Ç–∞ –æ—Ç overflow
        self.total_earned = self.total_earned
            .checked_add(amount)
            .ok_or(SolanaMafiaError::MathOverflow)?;
        Ok(())
    }

    /// Claim specific amount of referral earnings  
    pub fn claim_referral_earnings(&mut self, amount: u64) -> Result<()> {
        self.pending_referral_earnings = self.pending_referral_earnings.saturating_sub(amount);
        
        // üîí –ó–∞—â–∏—Ç–∞ –æ—Ç overflow
        self.total_earned = self.total_earned
            .checked_add(amount)
            .ok_or(SolanaMafiaError::MathOverflow)?;
        Ok(())
    }

    /// üîí –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞
    pub fn health_check(&self, current_time: i64) -> Result<()> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        if self.created_at > current_time {
            return Err(ProgramError::InvalidArgument.into());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
        if self.pending_earnings > 1000_000_000_000 { // 1000 SOL
            msg!("‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ pending earnings: {}", self.pending_earnings);
        }
        
        if self.pending_referral_earnings > self.total_invested / 2 {
            msg!("‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ referral earnings: {} vs invested: {}", 
                 self.pending_referral_earnings, self.total_invested);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–∑–Ω–µ—Å–æ–≤
        if self.businesses.len() > MAX_BUSINESSES_PER_PLAYER as usize {
            return Err(SolanaMafiaError::MaxBusinessesReached.into());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –±–∏–∑–Ω–µ—Å
        for business in &self.businesses {
            business.health_check(current_time)?;
        }
        
        Ok(())
    }
}

// üîí –¢–ï–ü–ï–†–¨ –ë–ï–ó–û–ü–ê–°–ù–û!
// - –†–∞–∑–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º (1000 –±–∞–π—Ç)
// - –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å checked math
// - –õ–∏–º–∏—Ç—ã –Ω–∞ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
// - Health checks –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
// - –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏