// state/player.rs - ULTRA-OPTIMIZED –°–¢–†–£–ö–¢–£–†–ê
use anchor_lang::prelude::*;
use crate::constants::*;
use crate::state::business::Business;
use crate::error::SolanaMafiaError;

/// üöÄ ULTRA-OPTIMIZED: –ë–∏—Ç–æ–≤—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è —Å–ª–æ—Ç–æ–≤
#[derive(AnchorSerialize, AnchorDeserialize, Clone, Copy, Debug)]
pub struct BusinessSlotCompact {
    /// –£–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ —Ñ–ª–∞–≥–∏ (32 –±–∏—Ç–∞):
    /// - –ë–∏—Ç—ã 0-1: SlotType (0=Basic, 1=Premium, 2=VIP, 3=Legendary)
    /// - –ë–∏—Ç 2: is_unlocked (–í–°–ï–ì–î–ê true –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ)
    /// - –ë–∏—Ç 3: has_business
    /// - –ë–∏—Ç 4: is_paid (–æ–ø–ª–∞—á–µ–Ω –ª–∏ —Å–ª–æ—Ç)
    /// - –ë–∏—Ç—ã 5-31: –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ
    pub flags: u32,
    
    /// –ë–∏–∑–Ω–µ—Å –≤ —Å–ª–æ—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    pub business: Option<Business>,
    
    /// –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç–µ (u64 - Legendary slot = 5 SOL > u32 limit)  
    pub slot_cost_paid: u64,
}

impl BusinessSlotCompact {
    pub const SIZE: usize = 
        4 +  // flags (u32)
        1 + Business::SIZE + // business Option<Business>
        8;   // slot_cost_paid (u64) ‚Üê –£–í–ï–õ–ò–ß–ï–ù–û –¥–ª—è Legendary slot

    // –ë–∏—Ç–æ–≤—ã–µ –º–∞—Å–∫–∏
    const SLOT_TYPE_MASK: u32 = 0x03;      // –ë–∏—Ç—ã 0-1
    const UNLOCKED_FLAG: u32 = 0x04;       // –ë–∏—Ç 2 (–≤—Å–µ–≥–¥–∞ true)
    const HAS_BUSINESS_FLAG: u32 = 0x08;   // –ë–∏—Ç 3
    const IS_PAID_FLAG: u32 = 0x10;        // –ë–∏—Ç 4

    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–ª–æ—Ç (0-2)
    pub fn new_basic_free() -> Self {
        Self {
            flags: Self::UNLOCKED_FLAG | Self::IS_PAID_FLAG, // unlocked + paid = true
            business: None,
            slot_cost_paid: 0,
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–Ω—ã–π —Å–ª–æ—Ç (3-5)
    pub fn new_basic_paid() -> Self {
        Self {
            flags: Self::UNLOCKED_FLAG, // unlocked = true, paid = false
            business: None,
            slot_cost_paid: 0,
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º —Å–ª–æ—Ç (6-8) - –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
    pub fn new_premium_unpaid(slot_type: SlotType) -> Self {
        let slot_type_bits = match slot_type {
            SlotType::Basic => 0,
            SlotType::Premium => 1,
            SlotType::VIP => 2,
            SlotType::Legendary => 3,
        };
        
        Self {
            flags: slot_type_bits | Self::UNLOCKED_FLAG, // unlocked = true, paid = false
            business: None,
            slot_cost_paid: 0,
        }
    }

    /// –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º —Å–ª–æ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    pub fn new_premium(slot_type: SlotType, cost: u64) -> Self {
        let slot_type_bits = match slot_type {
            SlotType::Basic => 0,
            SlotType::Premium => 1,
            SlotType::VIP => 2,
            SlotType::Legendary => 3,
        };
        
        Self {
            flags: slot_type_bits | Self::UNLOCKED_FLAG | Self::IS_PAID_FLAG,
            business: None,
            slot_cost_paid: cost,
        }
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã
    pub fn slot_type(&self) -> SlotType {
        match self.flags & Self::SLOT_TYPE_MASK {
            0 => SlotType::Basic,
            1 => SlotType::Premium,
            2 => SlotType::VIP,
            3 => SlotType::Legendary,
            _ => SlotType::Basic, // fallback
        }
    }

    pub fn is_unlocked(&self) -> bool {
        (self.flags & Self::UNLOCKED_FLAG) != 0
    }

    pub fn has_business(&self) -> bool {
        (self.flags & Self::HAS_BUSINESS_FLAG) != 0
    }

    pub fn is_paid(&self) -> bool {
        (self.flags & Self::IS_PAID_FLAG) != 0
    }

    // –°–µ—Ç—Ç–µ—Ä—ã
    pub fn set_unlocked(&mut self, unlocked: bool) {
        if unlocked {
            self.flags |= Self::UNLOCKED_FLAG;
        } else {
            self.flags &= !Self::UNLOCKED_FLAG;
        }
    }

    pub fn set_has_business(&mut self, has_business: bool) {
        if has_business {
            self.flags |= Self::HAS_BUSINESS_FLAG;
        } else {
            self.flags &= !Self::HAS_BUSINESS_FLAG;
        }
    }

    pub fn set_paid(&mut self, paid: bool) {
        if paid {
            self.flags |= Self::IS_PAID_FLAG;
        } else {
            self.flags &= !Self::IS_PAID_FLAG;
        }
    }

    /// –û–ø–ª–∞—Ç–∏—Ç—å —Å–ª–æ—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    pub fn pay_slot(&mut self, cost: u64) -> Result<()> {
        if self.is_paid() {
            return Err(SolanaMafiaError::SlotAlreadyPaid.into());
        }
        
        self.set_paid(true);
        self.slot_cost_paid = cost;
        Ok(())
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã
    pub fn get_slot_cost(&self, business_price: u64) -> u64 {
        match self.slot_type() {
            SlotType::Basic => {
                // –°–ª–æ—Ç—ã 0-2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ, —Å–ª–æ—Ç—ã 3-5 = 10% –æ—Ç —Ü–µ–Ω—ã –±–∏–∑–Ω–µ—Å–∞
                if self.is_paid() {
                    0 // –£–∂–µ –æ–ø–ª–∞—á–µ–Ω
                } else {
                    business_price * 10 / 100 // 10%
                }
            },
            SlotType::Premium => if self.is_paid() { 0 } else { PREMIUM_SLOT_COSTS[0] },
            SlotType::VIP => if self.is_paid() { 0 } else { PREMIUM_SLOT_COSTS[1] },
            SlotType::Legendary => if self.is_paid() { 0 } else { PREMIUM_SLOT_COSTS[2] },
        }
    }

    /// –ü–æ–º–µ—Å—Ç–∏—Ç—å –±–∏–∑–Ω–µ—Å –≤ —Å–ª–æ—Ç (—Å–ª–æ—Ç—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ)
    pub fn place_business(&mut self, business: Business) -> Result<()> {
        if self.has_business() {
            return Err(SolanaMafiaError::SlotOccupied.into());
        }
        
        self.business = Some(business);
        self.set_has_business(true);
        Ok(())
    }

    /// –£–¥–∞–ª–∏—Ç—å –±–∏–∑–Ω–µ—Å –∏–∑ —Å–ª–æ—Ç–∞
    pub fn remove_business(&mut self) -> Option<Business> {
        let business = self.business.take();
        self.set_has_business(false);
        business
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞
    pub fn get_yield_bonus(&self) -> u16 {
        match self.slot_type() {
            SlotType::Basic => 0,
            SlotType::Premium => PREMIUM_SLOT_YIELD_BONUSES[0],  // +1.5%
            SlotType::VIP => PREMIUM_SLOT_YIELD_BONUSES[1],      // +3%
            SlotType::Legendary => PREMIUM_SLOT_YIELD_BONUSES[2], // +5%
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–æ–¥–∞–∂–∏
    pub fn get_sell_fee_discount(&self) -> u8 {
        match self.slot_type() {
            SlotType::Basic => 0,
            SlotType::Premium => PREMIUM_SLOT_SELL_FEE_DISCOUNTS[0],  // 0%
            SlotType::VIP => PREMIUM_SLOT_SELL_FEE_DISCOUNTS[1],      // -50%
            SlotType::Legendary => PREMIUM_SLOT_SELL_FEE_DISCOUNTS[2], // -100%
        }
    }

    /// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–∞ —Å–ª–æ—Ç–∞
    pub fn calculate_earnings(&self, base_earnings: u64) -> u64 {
        if let Some(_business) = &self.business {
            let slot_bonus = self.get_yield_bonus();
            let bonus_earnings = (base_earnings as u128 * slot_bonus as u128) / 10000;
            base_earnings + bonus_earnings as u64
        } else {
            0
        }
    }
}

/// üöÄ ULTRA-OPTIMIZED Player —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
#[account]
pub struct PlayerCompact {
    pub owner: Pubkey,
    
    /// üÜï –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –ú–ê–°–°–ò–í –≤–º–µ—Å—Ç–æ Vec - —ç–∫–æ–Ω–æ–º–∏—è 24 –±–∞–π—Ç–∞ overhead!
    pub business_slots: [BusinessSlotCompact; MAX_REGULAR_SLOTS as usize],
    
    /// üÜï –£–ü–ê–ö–û–í–ê–ù–ù–´–ï –°–ß–ï–¢–ß–ò–ö–ò (u8 –≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π)
    pub unlocked_slots_count: u8,
    pub premium_slots_count: u8,
    
    /// üÜï –£–ü–ê–ö–û–í–ê–ù–ù–´–ï –§–õ–ê–ì–ò –í –û–î–ò–ù u32:
    /// - –ë–∏—Ç 0: has_paid_entry
    /// - –ë–∏—Ç—ã 1-31: –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ–ª–∞–≥–æ–≤
    pub flags: u32,
    
    /// üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è u64 –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—É–º–º, –æ—Å—Ç–∞–ª—å–Ω—ã–µ u32
    pub total_invested: u64,        // u64 - –º–æ–∂–µ—Ç –±—ã—Ç—å > 4.29 SOL (CharityFund 50 SOL)
    pub total_upgrade_spent: u64,   // u64 - CharityFund level 3 upgrade = 50 SOL 
    pub total_slot_spent: u64,      // u64 - max possible: 3√ó50SOL√ó10% + 1+2+5 = 23 SOL > 4.29 limit  
    pub total_earned: u64,          // u64 - –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ earnings –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª—å—à–∏–º–∏
    pub pending_earnings: u64,      // u64 - –º–æ–∂–µ—Ç –Ω–∞–∫–æ–ø–∏—Ç—å—Å—è –º–Ω–æ–≥–æ earnings
    
    /// üÜï u32 TIMESTAMPS –≤–º–µ—Å—Ç–æ i64 (–¥–æ 2106 –≥–æ–¥–∞)
    pub created_at: u32,
    pub next_earnings_time: u32,
    pub earnings_interval: u32,
    pub first_business_time: u32,
    pub last_auto_update: u32,
    
    pub bump: u8,
}

impl PlayerCompact {
    // –§–ª–∞–≥–∏
    const HAS_PAID_ENTRY_FLAG: u32 = 0x01;

    /// üö® –û–ë–ù–û–í–õ–ï–ù–ù–´–ô —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ u64 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ —É–¥–∞–ª–µ–Ω–∏—è referrals
    pub const SIZE: usize = 8 + // discriminator
        32 + // owner (Pubkey)
        (BusinessSlotCompact::SIZE * 9) + // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ 9 —Å–ª–æ—Ç–æ–≤
        1 + // unlocked_slots_count
        1 + // premium_slots_count
        4 + // flags (—É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ)
        8 + // total_invested (u64) ‚Üê –£–í–ï–õ–ò–ß–ï–ù–û
        8 + // total_upgrade_spent (u64) ‚Üê –£–í–ï–õ–ò–ß–ï–ù–û
        8 + // total_slot_spent (u64) ‚Üê –£–í–ï–õ–ò–ß–ï–ù–û
        8 + // total_earned (u64) ‚Üê –£–í–ï–õ–ò–ß–ï–ù–û
        8 + // pending_earnings (u64) ‚Üê –£–í–ï–õ–ò–ß–ï–ù–û
        4 + // created_at (u32)
        4 + // next_earnings_time (u32)
        4 + // earnings_interval (u32)
        4 + // first_business_time (u32)
        4 + // last_auto_update (u32)
        1; // bump

    pub fn has_paid_entry(&self) -> bool {
        (self.flags & Self::HAS_PAID_ENTRY_FLAG) != 0
    }

    pub fn set_has_paid_entry(&mut self, has_paid: bool) {
        if has_paid {
            self.flags |= Self::HAS_PAID_ENTRY_FLAG;
        } else {
            self.flags &= !Self::HAS_PAID_ENTRY_FLAG;
        }
    }

    /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è i64 timestamp –≤ u32 (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ 2106 –≥–æ–¥–∞)
    pub fn timestamp_to_u32(timestamp: i64) -> u32 {
        (timestamp as u32).max(1) // –ú–∏–Ω–∏–º—É–º 1, —á—Ç–æ–±—ã 0 –æ–∑–Ω–∞—á–∞–ª "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    }

    /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è u32 –æ–±—Ä–∞—Ç–Ω–æ –≤ i64
    pub fn u32_to_timestamp(compact_time: u32) -> i64 {
        if compact_time == 0 {
            0
        } else {
            compact_time as i64
        }
    }

    /// –ù–û–í–ê–Ø –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –≤—Å–µ 9 —Å–ª–æ—Ç–æ–≤ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —Å—Ä–∞–∑—É
    pub fn new(owner: Pubkey, bump: u8, current_time: i64) -> Self {
        let mut slots = [BusinessSlotCompact::new_basic_free(); 9];
        
        // –°–ª–æ—Ç—ã 0-2: Basic –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ (—É–∂–µ –æ–ø–ª–∞—á–µ–Ω—ã)
        for i in 0..3 {
            slots[i] = BusinessSlotCompact::new_basic_free();
        }
        
        // –°–ª–æ—Ç—ã 3-5: Basic –ø–ª–∞—Ç–Ω—ã–µ (10% –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
        for i in 3..6 {
            slots[i] = BusinessSlotCompact::new_basic_paid();
        }
        
        // –°–ª–æ—Ç—ã 6-8: Premium/VIP/Legendary (–Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ)
        slots[6] = BusinessSlotCompact::new_premium_unpaid(SlotType::Premium);
        slots[7] = BusinessSlotCompact::new_premium_unpaid(SlotType::VIP);
        slots[8] = BusinessSlotCompact::new_premium_unpaid(SlotType::Legendary);
        
        Self {
            owner,
            business_slots: slots,
            unlocked_slots_count: 9, // –í—Å–µ 9 —Å–ª–æ—Ç–æ–≤ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
            premium_slots_count: 3, // 3 premium —Å–ª–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã (–Ω–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω—ã)
            flags: 0, // has_paid_entry = false
            total_invested: 0,
            total_upgrade_spent: 0,
            total_slot_spent: 0,
            total_earned: 0,
            pending_earnings: 0,
            created_at: Self::timestamp_to_u32(current_time),
            next_earnings_time: Self::timestamp_to_u32(current_time + EARNINGS_INTERVAL),
            earnings_interval: EARNINGS_INTERVAL as u32,
            first_business_time: 0,
            last_auto_update: Self::timestamp_to_u32(current_time),
            bump,
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ—Ä–∞ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å earnings
    pub fn is_earnings_due(&self, current_time: i64) -> bool {
        Self::u32_to_timestamp(self.next_earnings_time) <= current_time
    }

    /// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ earnings
    pub fn auto_update_earnings(&mut self, current_time: i64) -> Result<u64> {
        if !self.is_earnings_due(current_time) {
            return Ok(0);
        }

        let mut total_earnings = 0u64;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥—ã –æ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ —Å–ª–æ—Ç–æ–≤
        for slot in &self.business_slots {
            if let Some(business) = &slot.business {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ earnings –∑–∞ –ø–µ—Ä–∏–æ–¥ EARNINGS_INTERVAL
                let base_earnings = business.calculate_earnings_for_period(EARNINGS_INTERVAL);
                // üè™ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞
                let slot_earnings = slot.calculate_earnings(base_earnings);
                total_earnings += slot_earnings;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º pending_earnings (—Ç–µ–ø–µ—Ä—å u64 - –±–µ–∑ overflow —Ä–∏—Å–∫–∞)
        self.pending_earnings = self.pending_earnings.saturating_add(total_earnings);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
        self.next_earnings_time = Self::timestamp_to_u32(current_time + EARNINGS_INTERVAL);
        self.last_auto_update = Self::timestamp_to_u32(current_time);

        Ok(total_earnings)
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤
    pub fn get_active_businesses_count(&self) -> u8 {
        self.business_slots.iter()
            .filter(|slot| slot.has_business())
            .count() as u8
    }

    /// –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç (–≤—Å–µ —Å–ª–æ—Ç—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã)
    pub fn find_free_slot(&self) -> Option<usize> {
        self.business_slots.iter()
            .position(|slot| !slot.has_business())
    }

    /// –ü–æ–º–µ—Å—Ç–∏—Ç—å –±–∏–∑–Ω–µ—Å –≤ —Å–ª–æ—Ç
    pub fn place_business_in_slot(&mut self, slot_index: usize, business: Business) -> Result<()> {
        if slot_index >= self.business_slots.len() {
            return Err(SolanaMafiaError::InvalidSlotIndex.into());
        }

        self.business_slots[slot_index].place_business(business)?;
        Ok(())
    }

    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ earnings
    pub fn set_earnings_schedule(&mut self, current_time: i64, _seed: u64) -> Result<()> {
        self.next_earnings_time = Self::timestamp_to_u32(current_time + EARNINGS_INTERVAL);
        self.earnings_interval = EARNINGS_INTERVAL as u32;
        Ok(())
    }

    /// –£–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å –≤ —Å–ª–æ—Ç–µ
    pub fn upgrade_business_in_slot(&mut self, slot_index: usize, upgrade_cost: u64, new_business: Business) -> Result<()> {
        if slot_index >= self.business_slots.len() {
            return Err(SolanaMafiaError::InvalidSlotIndex.into());
        }

        self.business_slots[slot_index].business = Some(new_business);
        self.total_upgrade_spent = self.total_upgrade_spent.saturating_add(upgrade_cost);
        Ok(())
    }

    /// –ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å –∏–∑ —Å–ª–æ—Ç–∞
    pub fn sell_business_from_slot(&mut self, slot_index: usize) -> Result<(Business, u8)> {
        if slot_index >= self.business_slots.len() {
            return Err(SolanaMafiaError::InvalidSlotIndex.into());
        }

        let business = self.business_slots[slot_index].remove_business()
            .ok_or(SolanaMafiaError::SlotEmpty)?;
        let discount = self.business_slots[slot_index].get_sell_fee_discount();
        
        Ok((business, discount))
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å pending earnings
    pub fn update_pending_earnings(&mut self, current_time: i64) -> Result<()> {
        self.auto_update_earnings(current_time)?;
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –¥–ª—è –∫–ª–µ–π–º–∞
    pub fn get_claimable_amount(&self) -> Result<u64> {
        Ok(self.pending_earnings)
    }

    /// –ó–∞–±—Ä–∞—Ç—å –≤—Å–µ earnings
    pub fn claim_all_earnings(&mut self) -> Result<()> {
        let claimed = self.pending_earnings;
        self.total_earned = self.total_earned.saturating_add(claimed);
        self.pending_earnings = 0;
        Ok(())
    }

    /// Health check
    pub fn health_check(&self, _current_time: i64) -> Result<()> {
        // Simplified health check
        Ok(())
    }

    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–∏–∑–Ω–µ—Å—ã
    pub fn get_all_businesses(&self) -> Vec<&Business> {
        self.business_slots.iter()
            .filter_map(|slot| slot.business.as_ref())
            .collect()
    }

    /// üè™ –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–æ—Ç–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
    pub fn get_slot_cost_for_business(&self, slot_index: usize, business_price: u64) -> u64 {
        if slot_index >= self.business_slots.len() {
            return 0;
        }
        
        self.business_slots[slot_index].get_slot_cost(business_price)
    }

    /// üè™ –û–ø–ª–∞—Ç–∏—Ç—å —Å–ª–æ—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
    pub fn pay_slot_if_needed(&mut self, slot_index: usize, business_price: u64) -> Result<u64> {
        if slot_index >= self.business_slots.len() {
            return Err(SolanaMafiaError::InvalidSlotIndex.into());
        }
        
        let slot_cost = self.business_slots[slot_index].get_slot_cost(business_price);
        
        if slot_cost > 0 {
            self.business_slots[slot_index].pay_slot(slot_cost)?;
            self.total_slot_spent = self.total_slot_spent.saturating_add(slot_cost);
        }
        
        Ok(slot_cost)
    }
}

/// Alias –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
pub type BusinessSlot = BusinessSlotCompact;
pub type Player = PlayerCompact;