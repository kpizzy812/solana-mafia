use anchor_lang::prelude::*;

pub mod constants;
pub mod error;
pub mod instructions;
pub mod state;
pub mod utils;

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã —Ä–∞–∑–¥–µ–ª—å–Ω–æ
use instructions::{
    initialize_handler, create_business_handler,
    claim_earnings_handler, update_earnings_handler,
    sell_business_handler, upgrade_business_handler
};

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
use instructions::{
    Initialize, CreatePlayer, CreateBusiness, ClaimEarnings,
    UpdateEarnings, SellBusiness, UpgradeBusiness,
    TogglePause, EmergencyPause, UpdateTreasuryFee,
    UpdateBusinessRates, GetTreasuryStats
};

use state::*;

declare_id!("Hnyyopg1fsQGY1JqEsp8CPZk1KjDKsAoosBJJi5ZpegU");

#[program]
pub mod solana_mafia {
    use super::*;

    /// Initialize the game with treasury wallet
    pub fn initialize(ctx: Context<Initialize>, treasury_wallet: Pubkey) -> Result<()> {
        initialize_handler(ctx, treasury_wallet)
    }

    /// üîí –ù–û–í–û–ï: –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –±–∏–∑–Ω–µ—Å–∞)
    pub fn create_player(ctx: Context<CreatePlayer>) -> Result<()> {
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–æ–¥—É–ª—è, –∞ –Ω–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        instructions::create_business::create_player(ctx)
    }

    /// üîí –ë–ï–ó–û–ü–ê–°–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ (—Ç—Ä–µ–±—É–µ—Ç existing player)
    pub fn create_business(
        ctx: Context<CreateBusiness>,
        business_type: u8,
        deposit_amount: u64,
    ) -> Result<()> {
        // üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ
        if ctx.accounts.game_state.is_paused {
            return Err(error::SolanaMafiaError::GamePaused.into());
        }
        create_business_handler(ctx, business_type, deposit_amount)
    }

    /// üîí –ë–ï–ó–û–ü–ê–°–ù–´–ô claim earnings (—Å –ª–∏–º–∏—Ç–∞–º–∏)
    pub fn claim_earnings(ctx: Context<ClaimEarnings>) -> Result<()> {
        // üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ
        if ctx.accounts.game_state.is_paused {
            return Err(error::SolanaMafiaError::GamePaused.into());
        }
        claim_earnings_handler(ctx)
    }

    /// üîí –ë–ï–ó–û–ü–ê–°–ù–´–ô update earnings (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
    pub fn update_earnings(ctx: Context<UpdateEarnings>) -> Result<()> {
        update_earnings_handler(ctx)
    }

    /// üîí –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ø—Ä–æ–¥–∞–∂–∞ –±–∏–∑–Ω–µ—Å–∞
    pub fn sell_business(ctx: Context<SellBusiness>, business_index: u8) -> Result<()> {
        // üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ
        if ctx.accounts.game_state.is_paused {
            return Err(error::SolanaMafiaError::GamePaused.into());
        }
        sell_business_handler(ctx, business_index)
    }

    /// üîí –ë–ï–ó–û–ü–ê–°–ù–´–ô upgrade –±–∏–∑–Ω–µ—Å–∞
    pub fn upgrade_business(ctx: Context<UpgradeBusiness>, business_index: u8) -> Result<()> {
        // üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ  
        if ctx.accounts.game_state.is_paused {
            return Err(error::SolanaMafiaError::GamePaused.into());
        }
        upgrade_business_handler(ctx, business_index)
    }

    /// üîí –û–¢–ö–õ–Æ–ß–ï–ù–û: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã (—Å–ª–∏—à–∫–æ–º –æ–ø–∞—Å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏)
    // pub fn add_referral_bonus(...) -> Result<()> {
    //     // –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–æ –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    // }

    // ===== ADMIN FUNCTIONS =====

    /// Admin: Toggle game pause state
    pub fn toggle_pause(ctx: Context<TogglePause>) -> Result<()> {
        instructions::admin::toggle_pause(ctx)
    }

    /// üÜò EMERGENCY: Stop all financial operations
    pub fn emergency_pause(ctx: Context<EmergencyPause>) -> Result<()> {
        instructions::admin::emergency_pause(ctx)
    }

    /// üîì EMERGENCY: Resume financial operations  
    pub fn emergency_unpause(ctx: Context<EmergencyPause>) -> Result<()> {
        instructions::admin::emergency_unpause(ctx)
    }

    /// Admin: Update business rates with safety checks
    pub fn update_business_rates(
        ctx: Context<UpdateBusinessRates>, 
        new_rates: [u16; 6]
    ) -> Result<()> {
        instructions::admin::update_business_rates(ctx, new_rates)
    }

    /// Admin: Update treasury fee (with limits)
    pub fn update_treasury_fee(ctx: Context<UpdateTreasuryFee>, new_fee: u8) -> Result<()> {
        instructions::admin::update_treasury_fee(ctx, new_fee)
    }

    /// View: Get treasury statistics and health
    pub fn get_treasury_stats(ctx: Context<GetTreasuryStats>) -> Result<()> {
        instructions::admin::get_treasury_stats(ctx)
    }

    /// üîí –ù–û–í–û–ï: Health check –¥–ª—è –∏–≥—Ä–æ–∫–∞
    pub fn health_check_player(ctx: Context<HealthCheckPlayer>) -> Result<()> {
        let clock = Clock::get()?;
        ctx.accounts.player.health_check(clock.unix_timestamp)?;
        
        msg!("‚úÖ Player health check passed for: {}", ctx.accounts.player.owner);
        Ok(())
    }
}

// üîí –ù–û–í–´–ô: Health check context
#[derive(Accounts)]
pub struct HealthCheckPlayer<'info> {
    /// Player to check
    #[account(
        seeds = [b"player", player.owner.as_ref()],
        bump = player.bump
    )]
    pub player: Account<'info, Player>,
}

// üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –†–ï–ó–Æ–ú–ï:
// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω integer overflow –≤ earnings
// ‚úÖ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–∏ earnings  
// ‚úÖ –£–±—Ä–∞–Ω race condition (—Ä–∞–∑–¥–µ–ª–∏–ª–∏ create_player/create_business)
// ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä Player –∞–∫–∫–∞—É–Ω—Ç–∞
// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏–º–∏—Ç—ã –Ω–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
// ‚úÖ Health checks –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
// ‚úÖ Emergency pause —Ñ—É–Ω–∫—Ü–∏–∏
// ‚úÖ Comprehensive logging –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
// ‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ)