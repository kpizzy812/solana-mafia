use anchor_lang::prelude::*;
use anchor_lang::system_program;

use crate::state::*;
use crate::error::SolanaMafiaError;
// –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ —É–±—Ä–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ —á–µ—Ä–µ–∑ lib.rs

/// Create new player (with entry fee)
pub fn create_player(ctx: Context<crate::CreatePlayer>) -> Result<()> {
    let game_config = &ctx.accounts.game_config;
    let game_state = &mut ctx.accounts.game_state;
    let player = &mut ctx.accounts.player;
    let clock = Clock::get()?;
    
    // üîí –£–ë–†–ê–õ–ò –ü–†–û–í–ï–†–ö–£ is_paused - –∏–≥—Ä–∞ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞!
    
    // üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ treasury_wallet —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç game_state
    if ctx.accounts.treasury_wallet.key() != game_state.treasury_wallet {
        return Err(SolanaMafiaError::UnauthorizedAdmin.into());
    }
    
    // Get current dynamic entry fee based on total players
    let current_total_players = game_state.total_players;
    let entry_fee = game_config.get_current_entry_fee(current_total_players);
    
    system_program::transfer(
        CpiContext::new(
            ctx.accounts.system_program.to_account_info(),
            system_program::Transfer {
                from: ctx.accounts.owner.to_account_info(),
                to: ctx.accounts.treasury_wallet.to_account_info(),
            },
        ),
        entry_fee,
    )?;

    // üîí –ü–†–û–í–ï–†–ö–ê: Player —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?
    if player.owner != Pubkey::default() {
        return Err(SolanaMafiaError::PlayerAlreadyExists.into());
    }
    
    // Initialize player
    **player = Player::new(
        ctx.accounts.owner.key(),
        ctx.bumps.player,
        clock.unix_timestamp,
    );
    player.set_has_paid_entry(true);
    
    // Update game stats
    game_state.add_player();
    game_state.total_treasury_collected = game_state.total_treasury_collected
        .checked_add(entry_fee)
        .ok_or(SolanaMafiaError::MathOverflow)?;
    
    msg!("üë§ Player created! Entry fee: {} lamports", entry_fee);
    // üÜï –≠–º–∏—Ç—Ç–∏–º event
    emit!(crate::PlayerCreated {
        wallet: ctx.accounts.owner.key(),
        entry_fee,
        created_at: clock.unix_timestamp,
        next_earnings_time: 0, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –±–∏–∑–Ω–µ—Å–µ
    });
    Ok(())
}

/// Health check for player data
pub fn health_check_player(ctx: Context<crate::HealthCheckPlayer>) -> Result<()> {
    let player = &ctx.accounts.player;
    let clock = Clock::get()?;
    
    // Run health check
    player.health_check(clock.unix_timestamp)?;
    
    msg!("‚úÖ Player health check passed");
    Ok(())
}

/// üÜï –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (—Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Å–ª–æ—Ç–æ–≤)
pub fn get_player_data(ctx: Context<crate::GetPlayerData>) -> Result<()> {
    let player = &ctx.accounts.player;
    let clock = Clock::get()?;

    // Get data using new slot system
    let active_businesses = player.get_active_businesses_count();
    let time_to_next_earnings = if PlayerCompact::u32_to_timestamp(player.next_earnings_time) > clock.unix_timestamp {
        PlayerCompact::u32_to_timestamp(player.next_earnings_time) - clock.unix_timestamp
    } else {
        0
    };
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    msg!("PLAYER_DATA: wallet={}, invested={}, pending={}, businesses={}, slots={}, next_earnings={}, time_to_next={}", 
         player.owner,
         player.total_invested,
         player.pending_earnings,
         active_businesses,
         player.business_slots.len(),
         player.next_earnings_time,
         time_to_next_earnings
    );
    
    Ok(())
}

/// üÜï –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ (–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ) –±–∏–∑–Ω–µ—Å—ã –∏–≥—Ä–æ–∫–∞
pub fn get_valid_player_businesses(ctx: Context<crate::GetValidPlayerBusinesses>) -> Result<()> {
    let player = &ctx.accounts.player;
    let all_businesses = player.get_all_businesses();
    
    msg!("VALID_BUSINESSES: player={}, total_slots={}, active_businesses={}", 
         player.owner, 
         player.business_slots.len(), 
         all_businesses.len()
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞
    for (index, slot) in player.business_slots.iter().enumerate() {
        if let Some(business) = &slot.business {
            msg!("SLOT_{}: type={}, unlocked={}, slot_type={:?}, business_type={}, invested={}, active={}", 
                 index,
                 slot.slot_type() as u8,
                 slot.is_unlocked(),
                 slot.slot_type(),
                 business.business_type.to_index(),
                 business.total_invested_amount,
                 business.is_active
            );
        } else {
            msg!("SLOT_{}: type={:?}, unlocked={}, empty", 
                 index, slot.slot_type(), slot.is_unlocked());
        }
    }
    
    Ok(())
}