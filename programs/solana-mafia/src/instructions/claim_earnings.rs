// instructions/claim_earnings.rs
use anchor_lang::prelude::*;
use anchor_lang::system_program;
use crate::constants::{PLAYER_SEED, TREASURY_SEED, GAME_STATE_SEED, CLAIM_EARNINGS_COOLDOWN};
use crate::state::{Player, Treasury, GameState};
use crate::error::SolanaMafiaError;

pub fn handler(ctx: Context<ClaimEarnings>) -> Result<()> {
    let clock = Clock::get()?;
    let player = &mut ctx.accounts.player;
    let game_state = &mut ctx.accounts.game_state;

    // üîí RATE LIMITING: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–≤–æ–¥–∞
    if player.businesses.len() > 0 {
        let last_claim = player.businesses.iter()
            .map(|b| b.last_claim)
            .max()
            .unwrap_or(0);
            
        let time_since_last_claim = clock.unix_timestamp - last_claim;
        if time_since_last_claim < CLAIM_EARNINGS_COOLDOWN {
            return Err(SolanaMafiaError::TooEarlyToClaim.into());
        }
    }

    // Update pending earnings first
    player.update_pending_earnings(clock.unix_timestamp)?;
    
    let claimable_amount = player.get_claimable_amount()?;
    
    if claimable_amount == 0 {
        return Err(SolanaMafiaError::NoEarningsToClaim.into());
    }

    // üîí –ù–û–í–ê–Ø –ó–ê–©–ò–¢–ê 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑—É–º–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    let max_daily_claim = player.total_invested
        .checked_mul(150) // –ú–∞–∫—Å–∏–º—É–º 1.5% –≤ –¥–µ–Ω—å
        .and_then(|x| x.checked_div(10000))
        .ok_or(SolanaMafiaError::MathOverflow)?;
    
    if claimable_amount > max_daily_claim {
        return Err(SolanaMafiaError::InvalidUpgradeLevel.into()); // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º error
    }

    // üîí –ù–û–í–ê–Ø –ó–ê–©–ò–¢–ê 2: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ treasury
    let treasury_balance = ctx.accounts.treasury_pda.to_account_info().lamports();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ treasury –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ + –∑–∞–ø–∞—Å 10%
    let required_balance = claimable_amount
        .checked_mul(110)
        .and_then(|x| x.checked_div(100))
        .ok_or(SolanaMafiaError::MathOverflow)?;
    
    if treasury_balance < required_balance {
        msg!("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ treasury!");
        msg!("–¢—Ä–µ–±—É–µ—Ç—Å—è: {}, –¥–æ—Å—Ç—É–ø–Ω–æ: {}", required_balance, treasury_balance);
        return Err(ProgramError::InsufficientFunds.into());
    }

    // üîí –ù–û–í–ê–Ø –ó–ê–©–ò–¢–ê 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —ç–∫–æ–Ω–æ–º–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    let total_pending_system = game_state.total_invested
        .checked_sub(game_state.total_withdrawn)
        .ok_or(SolanaMafiaError::MathOverflow)?;
    
    // –í—ã–ø–ª–∞—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 5% –æ—Ç –æ–±—â–∏—Ö pending –≤ —Å–∏—Å—Ç–µ–º–µ
    let max_system_withdrawal = total_pending_system
        .checked_div(20) // 5%
        .ok_or(SolanaMafiaError::MathOverflow)?;
    
    if claimable_amount > max_system_withdrawal {
        msg!("‚ö†Ô∏è –í—ã–ø–ª–∞—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã —Å–∏—Å—Ç–µ–º—ã!");
        msg!("–ó–∞–ø—Ä–æ—à–µ–Ω–æ: {}, –º–∞–∫—Å–∏–º—É–º: {}", claimable_amount, max_system_withdrawal);
        return Err(SolanaMafiaError::InvalidUpgradeLevel.into());
    }

    // üîí –ù–û–í–ê–Ø –ó–ê–©–ò–¢–ê 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∏ –æ–±—ã—á–Ω—ã—Ö earnings
    if player.pending_referral_earnings > 0 {
        // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ earnings –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å 20% –æ—Ç –æ–±—ã—á–Ω—ã—Ö
        let max_referral_allowed = player.pending_earnings
            .checked_div(5) // 20%
            .unwrap_or(0);
        
        if player.pending_referral_earnings > max_referral_allowed {
            msg!("‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã!");
            msg!("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ: {}, –æ–±—ã—á–Ω—ã–µ: {}", player.pending_referral_earnings, player.pending_earnings);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã
            let old_referral = player.pending_referral_earnings;
            player.pending_referral_earnings = max_referral_allowed;
            
            msg!("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã: {} -> {}", old_referral, max_referral_allowed);
        }
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º claimable_amount –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    let final_claimable_amount = player.get_claimable_amount()?;

    // üéØ –ë–ï–ó–û–ü–ê–°–ù–´–ô –ü–ï–†–ï–í–û–î SOL –∏–∑ treasury_pda –∫ –∏–≥—Ä–æ–∫—É –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π system_program
    let treasury_seeds = &[
        TREASURY_SEED,
        &[ctx.accounts.treasury_pda.bump],
    ];
    let treasury_signer = &[&treasury_seeds[..]];

    system_program::transfer(
        CpiContext::new_with_signer(
            ctx.accounts.system_program.to_account_info(),
            system_program::Transfer {
                from: ctx.accounts.treasury_pda.to_account_info(),
                to: ctx.accounts.player_owner.to_account_info(),
            },
            treasury_signer,
        ),
        final_claimable_amount,
    )?;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    player.claim_all_earnings()?;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç overflow
    game_state.total_withdrawn = game_state.total_withdrawn
        .checked_add(final_claimable_amount)
        .ok_or(SolanaMafiaError::MathOverflow)?;

    msg!("üí∞ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    msg!("Player: {}", player.owner);
    msg!("Amount claimed: {} lamports", final_claimable_amount);
    msg!("Treasury balance after: {}", 
         treasury_balance.checked_sub(final_claimable_amount).unwrap_or(0));
    msg!("Total system withdrawn: {} lamports", game_state.total_withdrawn);
    
    Ok(())
}

#[derive(Accounts)]
pub struct ClaimEarnings<'info> {
    /// Player who is claiming earnings
    #[account(mut)]
    pub player_owner: Signer<'info>,
    
    /// Player account
    #[account(
        mut,
        seeds = [PLAYER_SEED, player_owner.key().as_ref()],
        bump = player.bump,
        constraint = player.owner == player_owner.key()
    )]
    pub player: Account<'info, Player>,

    /// Treasury PDA holding the funds
    #[account(
        mut,
        seeds = [TREASURY_SEED],
        bump = treasury_pda.bump
    )]
    pub treasury_pda: Account<'info, Treasury>,

    /// Game state for statistics and security checks
    #[account(
        mut,
        seeds = [GAME_STATE_SEED],
        bump = game_state.bump
    )]
    pub game_state: Account<'info, GameState>,

    /// System program for transfers
    pub system_program: Program<'info, System>,
}