// instructions/update_earnings.rs
use anchor_lang::prelude::*;
use crate::constants::{PLAYER_SEED, UPDATE_EARNINGS_COOLDOWN};
use crate::state::Player;
use crate::error::SolanaMafiaError;

/// üîí –ë–ï–ó–û–ü–ê–°–ù–ê–Ø Crank instruction –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è earnings
/// –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–∏ earnings!
pub fn handler(ctx: Context<UpdateEarnings>) -> Result<()> {
    let clock = Clock::get()?;
    let player = &mut ctx.accounts.player;
    
    // üîí –ó–ê–©–ò–¢–ê 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–∑—ã–≤–∞—é—â–∏–π = –≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞
    if ctx.accounts.authority.key() != player.owner {
        return Err(SolanaMafiaError::UnauthorizedAdmin.into());
    }
    
    // üîí –ó–ê–©–ò–¢–ê 2: Rate limiting - –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
    if player.businesses.len() > 0 {
        let last_update = player.businesses.iter()
            .map(|b| b.last_claim)
            .max()
            .unwrap_or(0);
            
        let time_since_last_update = clock.unix_timestamp - last_update;
        if time_since_last_update < UPDATE_EARNINGS_COOLDOWN {
            return Err(SolanaMafiaError::TooEarlyToUpdate.into());
        }
    }
    
    // üîí –ó–ê–©–ò–¢–ê 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–∫—Ä—É—á–µ–Ω
    let old_pending = player.pending_earnings;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º earnings —Å –Ω–æ–≤—ã–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    player.update_pending_earnings(clock.unix_timestamp)?;
    
    let new_earnings = player.pending_earnings
        .checked_sub(old_pending)
        .ok_or(SolanaMafiaError::MathOverflow)?;
    
    // üîí –ó–ê–©–ò–¢–ê 4: –†–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç –Ω–∞ –Ω–æ–≤—ã–µ earnings (–º–∞–∫—Å–∏–º—É–º 1 SOL –∑–∞ –æ–¥–∏–Ω update)
    if new_earnings > 1_000_000_000 { // 1 SOL
        msg!("‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–∏–µ earnings: {} lamports", new_earnings);
        return Err(SolanaMafiaError::InvalidUpgradeLevel.into());
    }
    
    // üîí –ó–ê–©–ò–¢–ê 5: –û–±—â–∏–π –ª–∏–º–∏—Ç –Ω–∞ pending earnings (–º–∞–∫—Å–∏–º—É–º 100 SOL)
    if player.pending_earnings > 100_000_000_000 { // 100 SOL
        msg!("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç pending earnings: {} lamports", player.pending_earnings);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º—É–º–∞
        player.pending_earnings = 100_000_000_000;
    }
    
    msg!("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ earnings:");
    msg!("Player: {}", player.owner);
    msg!("New earnings: {} lamports", new_earnings);
    msg!("Total pending: {} lamports", player.pending_earnings);
    msg!("Active businesses: {}", player.businesses.iter().filter(|b| b.is_active).count());
    
    Ok(())
}

#[derive(Accounts)]
pub struct UpdateEarnings<'info> {
    /// üîí –ù–û–í–û–ï: –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–∏ earnings
    pub authority: Signer<'info>,
    
    /// Player whose earnings are being updated
    #[account(
        mut,
        seeds = [PLAYER_SEED, authority.key().as_ref()], // üîí –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ authority!
        bump = player.bump,
        constraint = player.owner == authority.key() @ SolanaMafiaError::UnauthorizedAdmin
    )]
    pub player: Account<'info, Player>,
}

// üîí –¢–ï–ü–ï–†–¨ –ë–ï–ó–û–ü–ê–°–ù–û!
// - –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–∏ earnings
// - Rate limiting —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
// - –õ–∏–º–∏—Ç—ã –Ω–∞ —Ä–∞–∑–º–µ—Ä –Ω–æ–≤—ã—Ö earnings  
// - –õ–∏–º–∏—Ç—ã –Ω–∞ –æ–±—â–∏–π pending
// - –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å