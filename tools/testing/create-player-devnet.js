const anchor = require("@coral-xyz/anchor");
const { PublicKey, Connection, LAMPORTS_PER_SOL, Keypair } = require("@solana/web3.js");

// DEVNET –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PROGRAM_ID = new PublicKey("HifXYhFJapXPeBgKKZu8gmdc7cZvfERJ9aEkchHxyBLS");
const DEVNET_URL = "https://api.devnet.solana.com";

// Target player
const TARGET_PLAYER = new PublicKey("DfDkPhcm93C4JyXVRdz8M9B7cP8aeZKS9DNxS5cTxEmE");

async function testCreatePlayer() {
    console.log("üë§ TESTING: Create Player –Ω–∞ DEVNET");
    console.log("====================================");
    
    try {
        const connection = new Connection(DEVNET_URL, "confirmed");
        
        // –°–æ–∑–¥–∞–µ–º wallet –¥–ª—è target player (–Ω—É–∂–µ–Ω private key)
        // –ù–û –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –∏–≥—Ä–æ–∫–∞
        const [playerPda, bump] = await PublicKey.findProgramAddress(
            [Buffer.from("player"), TARGET_PLAYER.toBuffer()],
            PROGRAM_ID
        );
        
        console.log(`üéØ Target player: ${TARGET_PLAYER}`);
        console.log(`üéØ Player PDA: ${playerPda}`);
        console.log(`üéØ PDA Bump: ${bump}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        const playerInfo = await connection.getAccountInfo(playerPda);
        
        if (playerInfo) {
            console.log("‚úÖ Player account —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
            console.log(`- Size: ${playerInfo.data.length} bytes`);
            console.log(`- Owner: ${playerInfo.owner.toString()}`);
            console.log(`- Lamports: ${playerInfo.lamports}`);
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å owner field –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            // Discriminator: 8 bytes, –ø–æ—Ç–æ–º owner: 32 bytes
            const ownerBytes = playerInfo.data.slice(8, 40);
            const storedOwner = new PublicKey(ownerBytes);
            console.log(`- Stored owner: ${storedOwner.toString()}`);
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º PDA —Å stored owner
            const [testPda] = await PublicKey.findProgramAddress(
                [Buffer.from("player"), storedOwner.toBuffer()],
                PROGRAM_ID
            );
            console.log(`- PDA —Å stored owner: ${testPda.toString()}`);
            console.log(`- PDA —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${testPda.toString() === playerPda.toString()}`);
            
            if (storedOwner.toString() !== TARGET_PLAYER.toString()) {
                console.log("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Owner field –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!");
                console.log("üí° –í–æ–∑–º–æ–∂–Ω–æ –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–≤–∞–ª—Å—è —Å –±–∞–≥–æ–º");
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π PDA –¥–ª—è stored owner
                console.log(`üí° –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π PDA –¥–ª—è stored owner –±—ã–ª –±—ã: ${testPda.toString()}`);
            }
            
        } else {
            console.log("‚ùå Player account –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º game state PDAs –¥–ª—è devnet
        const [gameStatePda] = await PublicKey.findProgramAddress([Buffer.from("game_state")], PROGRAM_ID);
        const [gameConfigPda] = await PublicKey.findProgramAddress([Buffer.from("game_config")], PROGRAM_ID);
        const [treasuryPda] = await PublicKey.findProgramAddress([Buffer.from("treasury")], PROGRAM_ID);
        
        console.log("\nüìã DEVNET PDAs:");
        console.log(`GameState: ${gameStatePda}`);
        console.log(`GameConfig: ${gameConfigPda}`);
        console.log(`Treasury: ${treasuryPda}`);
        
    } catch (error) {
        console.log(`‚ùå Error: ${error.message}`);
        console.log(error.stack);
    }
}

testCreatePlayer().catch(console.error);