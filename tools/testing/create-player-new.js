const anchor = require("@coral-xyz/anchor");
const { PublicKey, Connection, LAMPORTS_PER_SOL, Keypair } = require("@solana/web3.js");

// DEVNET –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
const PROGRAM_ID = new PublicKey("HifXYhFJapXPeBgKKZu8gmdc7cZvfERJ9aEkchHxyBLS");
const DEVNET_URL = "https://api.devnet.solana.com";

// –ù–æ–≤—ã–π wallet –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const NEW_WALLET = "9BA18LBbm3wL7Yt4YfumaHAqR7eGFriCLZkpZZMX28BF";

async function createPlayerForNewWallet() {
    console.log("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ wallet");
    console.log("=====================================");
    
    try {
        const connection = new Connection(DEVNET_URL, "confirmed");
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º IDL –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
        const idl = require("../target/idl/solana_mafia.json");
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π wallet –¥–ª—è –≤—ã–∑–æ–≤–∞ (admin wallet)
        const adminKeypair = Keypair.fromSecretKey(
            // Admin private key –∏–∑ .env (base58)
            anchor.utils.bytes.bs58.decode("5MBu1f5jjsUJK71fPwEhbVPKCzbJUmtVYdBPMAKrGWPiZpQUquU5D1rHhWpQSrcXYMYRYhAnQ1uoaMVForQEmiE")
        );
        
        const wallet = new anchor.Wallet(adminKeypair);
        const provider = new anchor.AnchorProvider(connection, wallet, {});
        const program = new anchor.Program(idl, PROGRAM_ID, provider);
        
        // Target wallet –∫–∞–∫ pubkey
        const targetWallet = new PublicKey(NEW_WALLET);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PDAs
        const [gameState] = await PublicKey.findProgramAddress([Buffer.from("game_state")], PROGRAM_ID);
        const [gameConfig] = await PublicKey.findProgramAddress([Buffer.from("game_config")], PROGRAM_ID);
        const [player] = await PublicKey.findProgramAddress([Buffer.from("player"), targetWallet.toBuffer()], PROGRAM_ID);
        
        console.log(`üéØ Target wallet: ${targetWallet}`);
        console.log(`üéØ Player PDA: ${player}`);
        console.log(`üéØ GameState: ${gameState}`);
        console.log(`üéØ GameConfig: ${gameConfig}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫
        const playerInfo = await connection.getAccountInfo(player);
        if (playerInfo) {
            console.log("‚ÑπÔ∏è –ò–≥—Ä–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º treasury wallet –∏–∑ game state
        const gameStateAccount = await program.account.gameState.fetch(gameState);
        const treasuryWallet = gameStateAccount.treasuryWallet;
        
        console.log(`üí∞ Treasury wallet: ${treasuryWallet}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å admin wallet –¥–ª—è –æ–ø–ª–∞—Ç—ã
        const adminBalance = await connection.getBalance(adminKeypair.publicKey);
        console.log(`üí∞ Admin balance: ${adminBalance / LAMPORTS_PER_SOL} SOL`);
        
        if (adminBalance < 0.1 * LAMPORTS_PER_SOL) {
            console.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ admin wallet");
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        console.log("üî® –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞...");
        const tx = await program.methods
            .createPlayer(null) // –±–µ–∑ referrer
            .accounts({
                owner: adminKeypair.publicKey, // admin –ø–ª–∞—Ç–∏—Ç
                player: player,
                gameConfig: gameConfig,
                gameState: gameState,
                treasuryWallet: treasuryWallet,
                systemProgram: anchor.web3.SystemProgram.programId,
            })
            .rpc();
            
        console.log(`‚úÖ –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω! TX: ${tx}`);
        console.log(`üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å admin earnings update –¥–ª—è: ${NEW_WALLET}`);
        
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        if (error.logs) {
            console.log("üìã –õ–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:");
            error.logs.forEach(log => console.log("  ", log));
        }
    }
}

createPlayerForNewWallet().catch(console.error);