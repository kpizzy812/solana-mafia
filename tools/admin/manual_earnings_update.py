#!/usr/bin/env python3
"""
Manual earnings update script for debugging and maintenance.
Updated for new blockchain-first architecture.
"""

import asyncio
import sys
from datetime import datetime

from app.core.database import get_async_session
from app.services.resilient_earnings_processor import get_resilient_earnings_processor
from app.services.transaction_service import get_transaction_service
from app.models.player import Player
from sqlalchemy import select, update


async def update_player_earnings(wallet: str):
    """Manually update earnings for a specific player using new architecture."""
    print(f"ultrathink: –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Ö–æ–¥—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞ {wallet} (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)")
    
    try:
        # Send permissionless blockchain transaction
        transaction_service = await get_transaction_service()
        result = await transaction_service.update_player_earnings_permissionless(wallet)
        
        if result.success:
            print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {result.signature}")
            
            # Wait a bit for blockchain to process
            await asyncio.sleep(3)
            
            # Sync database with blockchain state
            processor = await get_resilient_earnings_processor()
            updated_states = await processor._get_all_player_states_batch([wallet])
            
            if wallet in updated_states:
                state = updated_states[wallet]
                async with get_async_session() as db:
                    await db.execute(
                        update(Player)
                        .where(Player.wallet == wallet)
                        .values(
                            pending_earnings=state.pending_earnings,
                            last_earnings_update=datetime.fromtimestamp(state.last_auto_update),
                            updated_at=datetime.utcnow()
                        )
                    )
                    await db.commit()
                
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞")
                
        else:
            print(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {result.error}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


async def show_player_stats(wallet: str):
    """Show player statistics."""
    async with get_async_session() as db:
        # Get player info
        result = await db.execute(
            select(Player).where(Player.wallet == wallet)
        )
        player = result.scalar_one_or_none()
        
        if not player:
            print(f"‚ùå –ò–≥—Ä–æ–∫ {wallet} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {wallet}:")
        print(f"   pending_earnings: {player.pending_earnings} ({player.pending_earnings/1e9:.9f} SOL)")
        print(f"   total_earned: {player.total_earned} ({player.total_earned/1e9:.9f} SOL)")
        print(f"   last_earnings_update: {player.last_earnings_update}")
        print(f"   next_earnings_time: {player.next_earnings_time}")
        print(f"   daily_earnings_estimate: {player.daily_earnings_estimate} ({player.daily_earnings_estimate/1e9:.9f} SOL)")
        
        # Get businesses
        from app.models.business import Business
        business_result = await db.execute(
            select(Business).where(
                Business.player_wallet == wallet,
                Business.is_active == True
            )
        )
        businesses = business_result.scalars().all()
        
        print(f"   –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤: {len(businesses)}")
        total_daily_rate = sum(b.daily_rate for b in businesses)
        print(f"   –æ–±—â–∞—è –¥–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_daily_rate} ({total_daily_rate/1e9:.9f} SOL)")


async def trigger_full_earnings_process():
    """Trigger full earnings process for all players."""
    print(f"ultrathink: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤")
    
    try:
        processor = await get_resilient_earnings_processor()
        stats = await processor.run_daily_earnings_process()
        
        print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {stats.total_players_found}")
        print(f"   –ù—É–∂–¥–∞–ª–∏—Å—å –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {stats.players_needing_update}")
        print(f"   –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {stats.successful_updates}")
        print(f"   –û—à–∏–±–æ–∫: {stats.failed_updates}")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats.total_processing_time:.2f}s")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats.success_rate * 100:.1f}%")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


async def main():
    """Main function."""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python manual_earnings_update.py <wallet> [action]")
        print("")
        print("–î–µ–π—Å—Ç–≤–∏—è:")
        print("  update - –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Ö–æ–¥—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")  
        print("  stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("  fix-schedule - –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        print("")
        print("–ü—Ä–∏–º–µ—Ä:")
        print("  python manual_earnings_update.py DfDkPhcm93C4JyXVRdz8M9B7cP8aeZKS9DNxS5cTxEmE update")
        return
        
    wallet = sys.argv[1]
    action = sys.argv[2] if len(sys.argv) > 2 else "update"
    
    if action == "stats":
        await show_player_stats(wallet)
    elif action == "fix-schedule":
        await trigger_full_earnings_process()
    elif action == "update":
        await show_player_stats(wallet)
        print("\n" + "="*50)
        await update_player_earnings(wallet)
        print("="*50)
        await show_player_stats(wallet)
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")


if __name__ == "__main__":
    asyncio.run(main())